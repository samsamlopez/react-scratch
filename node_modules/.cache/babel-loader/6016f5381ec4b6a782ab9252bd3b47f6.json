{"ast":null,"code":"import _slicedToArray from \"/home/webdev/Documents/react-portal/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/webdev/Documents/react-portal/src/common-components/async-table/stories/AsyncTable.stories.js\";\nimport React, { createElement, useState } from \"react\";\nimport { storiesOf } from \"@storybook/react\";\nimport { AsyncTable } from \"..\";\nimport { TableRow, TableCell } from \"@material-ui/core\";\nimport { Settings } from \"@material-ui/icons\";\nimport { UnderlineCell, ActiveCell, LiveCell } from \"../../table-cells\";\nimport { FileCopyOutlined as Icon } from \"@material-ui/icons\";\nimport { mdiContentCopy } from \"@mdi/js\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport notes from \"./notes.md\";\nconst LightTooltip = withStyles(theme => ({\n  tooltip: {\n    backgroundColor: theme.palette.common.white,\n    color: \"rgba(0, 0, 0, 0.87)\",\n    boxShadow: theme.shadows[1],\n    fontSize: 11\n  }\n}))(Tooltip);\nconst stories = storiesOf(\"Async Table\", module);\nconst sampleData = [{\n  name: \"test\",\n  slug: \"test\",\n  uuid: \"3d83a30c-0431-11ea-b33e-0242ac110011\",\n  live: true,\n  active: true\n}, {\n  name: \"test\",\n  slug: \"test\",\n  uuid: \"3d83a30c-0431-11ea-b33e-0242ac110014\",\n  live: false,\n  active: false\n}];\nstories.add(\"default\", () => createElement(() => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        copy = _useState2[0],\n        setCopy = _useState2[1];\n\n  return React.createElement(AsyncTable, {\n    headers: [\"Name\", \"Slug\", \"UUID\"],\n    tableData: sampleData,\n    render: (samples, {\n      row,\n      cell,\n      uuid,\n      icon\n    }) => samples.map(sample => React.createElement(TableRow, {\n      className: row,\n      key: sample.uuid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, sample.name), React.createElement(TableCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, sample.slug), React.createElement(TableCell, {\n      className: uuid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, sample.uuid), React.createElement(CopyToClipboard, {\n      text: sample.uuid,\n      onCopy: () => setCopy(true),\n      onPointerLeave: () => setCopy(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, copy ? React.createElement(LightTooltip, {\n      title: \"UUID Copied!\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      className: icon,\n      path: mdiContentCopy,\n      size: 1,\n      rotate: 360,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })) : React.createElement(LightTooltip, {\n      title: \"Copy UUID\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      className: icon,\n      path: mdiContentCopy,\n      size: 1,\n      rotate: 360,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })))))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  });\n}), {\n  notes: {\n    markdown: notes\n  }\n});\nstories.add(\"with underline cell\", () => createElement(() => {\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        copy = _useState4[0],\n        setCopy = _useState4[1];\n\n  return React.createElement(AsyncTable, {\n    headers: [\"Name\", \"Slug\", \"UUID\"],\n    tableData: sampleData,\n    render: (samples, {\n      row,\n      cell\n    }) => samples.map(sample => React.createElement(TableRow, {\n      className: row,\n      key: sample.uuid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(UnderlineCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, sample.name), React.createElement(TableCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, sample.slug), React.createElement(TableCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, sample.uuid))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  });\n}), {\n  notes: {\n    markdown: notes\n  }\n});\nstories.add(\"with live cell\", () => createElement(() => {\n  return React.createElement(AsyncTable, {\n    headers: [\"Name\", \"Slug\", \"UUID\", \"live\"],\n    tableData: sampleData,\n    render: (samples, {\n      row,\n      cell\n    }) => samples.map(sample => React.createElement(TableRow, {\n      className: row,\n      key: sample.uuid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(UnderlineCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, sample.name), React.createElement(TableCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, sample.slug), React.createElement(TableCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, sample.uuid), React.createElement(LiveCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, sample.live))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  });\n}), {\n  notes: {\n    markdown: notes\n  }\n});\nstories.add(\"with active cell\", () => createElement(() => {\n  return React.createElement(AsyncTable, {\n    headers: [\"Name\", \"Slug\", \"UUID\", \"live\", \"active\"],\n    tableData: sampleData,\n    render: (samples, {\n      row,\n      cell\n    }) => samples.map(sample => React.createElement(TableRow, {\n      className: row,\n      key: sample.uuid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(UnderlineCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, sample.name), React.createElement(TableCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, sample.slug), React.createElement(TableCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, sample.uuid), React.createElement(LiveCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, sample.live), React.createElement(ActiveCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, sample.active))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  });\n}), {\n  notes: {\n    markdown: notes\n  }\n});\nstories.add(\"with button\", () => createElement(() => {\n  return React.createElement(AsyncTable, {\n    headers: [\"Name\", \"Slug\", \"UUID\", \"live\", \"active\", \"\"],\n    tableData: sampleData,\n    render: (samples, {\n      row,\n      cell,\n      uuid,\n      icon\n    }) => samples.map(sample => React.createElement(TableRow, {\n      className: row,\n      key: sample.uuid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(UnderlineCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, sample.name), React.createElement(TableCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, sample.slug), React.createElement(TableCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, sample.uuid), React.createElement(LiveCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, sample.live), React.createElement(ActiveCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, sample.active), React.createElement(TableCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(Settings, {\n      className: icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    })))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  });\n}), {\n  notes: {\n    markdown: notes\n  }\n});","map":{"version":3,"sources":["/home/webdev/Documents/react-portal/src/common-components/async-table/stories/AsyncTable.stories.js"],"names":["React","createElement","useState","storiesOf","AsyncTable","TableRow","TableCell","Settings","UnderlineCell","ActiveCell","LiveCell","FileCopyOutlined","Icon","mdiContentCopy","CopyToClipboard","Tooltip","withStyles","notes","LightTooltip","theme","tooltip","backgroundColor","palette","common","white","color","boxShadow","shadows","fontSize","stories","module","sampleData","name","slug","uuid","live","active","add","copy","setCopy","samples","row","cell","icon","map","sample","markdown"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,IAA3B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,mBAApC;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,mBAApD;AACA,SAASC,gBAAgB,IAAIC,IAA7B,QAAyC,oBAAzC;AACA,SAASC,cAAT,QAA+B,SAA/B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,KAAP,MAAkB,YAAlB;AAEA,MAAMC,YAAY,GAAGF,UAAU,CAACG,KAAK,KAAK;AACxCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,eAAe,EAAEF,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBC,KAD/B;AAEPC,IAAAA,KAAK,EAAE,qBAFA;AAGPC,IAAAA,SAAS,EAAEP,KAAK,CAACQ,OAAN,CAAc,CAAd,CAHJ;AAIPC,IAAAA,QAAQ,EAAE;AAJH;AAD+B,CAAL,CAAN,CAAV,CAOjBb,OAPiB,CAArB;AASA,MAAMc,OAAO,GAAG1B,SAAS,CAAC,aAAD,EAAgB2B,MAAhB,CAAzB;AAEA,MAAMC,UAAU,GAAG,CACjB;AACEC,EAAAA,IAAI,EAAE,MADR;AAEEC,EAAAA,IAAI,EAAE,MAFR;AAGEC,EAAAA,IAAI,EAAE,sCAHR;AAIEC,EAAAA,IAAI,EAAE,IAJR;AAKEC,EAAAA,MAAM,EAAE;AALV,CADiB,EAQjB;AACEJ,EAAAA,IAAI,EAAE,MADR;AAEEC,EAAAA,IAAI,EAAE,MAFR;AAGEC,EAAAA,IAAI,EAAE,sCAHR;AAIEC,EAAAA,IAAI,EAAE,KAJR;AAKEC,EAAAA,MAAM,EAAE;AALV,CARiB,CAAnB;AAiBAP,OAAO,CAACQ,GAAR,CACE,SADF,EAEE,MACEpC,aAAa,CAAC,MAAM;AAAA,oBACMC,QAAQ,CAAC,KAAD,CADd;AAAA;AAAA,QACXoC,IADW;AAAA,QACLC,OADK;;AAElB,SACE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,CADX;AAEE,IAAA,SAAS,EAAER,UAFb;AAGE,IAAA,MAAM,EAAE,CAACS,OAAD,EAAU;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,IAAP;AAAaR,MAAAA,IAAb;AAAmBS,MAAAA;AAAnB,KAAV,KACNH,OAAO,CAACI,GAAR,CAAYC,MAAM,IAChB,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAEJ,GAArB;AAA0B,MAAA,GAAG,EAAEI,MAAM,CAACX,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAEQ,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6BG,MAAM,CAACb,IAApC,CADF,EAEE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAEU,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6BG,MAAM,CAACZ,IAApC,CAFF,EAGE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAEC,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIW,MAAM,CAACX,IAAX,CADF,EAEE,oBAAC,eAAD;AACE,MAAA,IAAI,EAAEW,MAAM,CAACX,IADf;AAEE,MAAA,MAAM,EAAE,MAAMK,OAAO,CAAC,IAAD,CAFvB;AAGE,MAAA,cAAc,EAAE,MAAMA,OAAO,CAAC,KAAD,CAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGD,IAAI,GACH,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAC,cAApB;AAAmC,MAAA,SAAS,EAAC,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AACE,MAAA,SAAS,EAAEK,IADb;AAEE,MAAA,IAAI,EAAE9B,cAFR;AAGE,MAAA,IAAI,EAAE,CAHR;AAIE,MAAA,MAAM,EAAE,GAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADG,GAUH,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAC,WAApB;AAAgC,MAAA,SAAS,EAAC,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AACE,MAAA,SAAS,EAAE8B,IADb;AAEE,MAAA,IAAI,EAAE9B,cAFR;AAGE,MAAA,IAAI,EAAE,CAHR;AAIE,MAAA,MAAM,EAAE,GAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAfJ,CAFF,CAHF,CADF,CAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AA0CD,CA5CY,CAHjB,EAgDE;AAAEI,EAAAA,KAAK,EAAE;AAAE6B,IAAAA,QAAQ,EAAE7B;AAAZ;AAAT,CAhDF;AAmDAY,OAAO,CAACQ,GAAR,CACE,qBADF,EAEE,MACEpC,aAAa,CAAC,MAAM;AAAA,qBACMC,QAAQ,CAAC,KAAD,CADd;AAAA;AAAA,QACXoC,IADW;AAAA,QACLC,OADK;;AAElB,SACE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,CADX;AAEE,IAAA,SAAS,EAAER,UAFb;AAGE,IAAA,MAAM,EAAE,CAACS,OAAD,EAAU;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAAV,KACNF,OAAO,CAACI,GAAR,CAAYC,MAAM,IAChB,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAEJ,GAArB;AAA0B,MAAA,GAAG,EAAEI,MAAM,CAACX,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AAAe,MAAA,SAAS,EAAEQ,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiCG,MAAM,CAACb,IAAxC,CADF,EAEE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAEU,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6BG,MAAM,CAACZ,IAApC,CAFF,EAGE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAES,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6BG,MAAM,CAACX,IAApC,CAHF,CADF,CAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAeD,CAjBY,CAHjB,EAqBE;AAAEjB,EAAAA,KAAK,EAAE;AAAE6B,IAAAA,QAAQ,EAAE7B;AAAZ;AAAT,CArBF;AAwBAY,OAAO,CAACQ,GAAR,CACE,gBADF,EAEE,MACEpC,aAAa,CAAC,MAAM;AAClB,SACE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,CADX;AAEE,IAAA,SAAS,EAAE8B,UAFb;AAGE,IAAA,MAAM,EAAE,CAACS,OAAD,EAAU;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAAV,KACNF,OAAO,CAACI,GAAR,CAAYC,MAAM,IAChB,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAEJ,GAArB;AAA0B,MAAA,GAAG,EAAEI,MAAM,CAACX,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AAAe,MAAA,SAAS,EAAEQ,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiCG,MAAM,CAACb,IAAxC,CADF,EAEE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAEU,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6BG,MAAM,CAACZ,IAApC,CAFF,EAGE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAES,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6BG,MAAM,CAACX,IAApC,CAHF,EAIE,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAEQ,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BG,MAAM,CAACV,IAAnC,CAJF,CADF,CAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAgBD,CAjBY,CAHjB,EAqBE;AAAElB,EAAAA,KAAK,EAAE;AAAE6B,IAAAA,QAAQ,EAAE7B;AAAZ;AAAT,CArBF;AAwBAY,OAAO,CAACQ,GAAR,CACE,kBADF,EAEE,MACEpC,aAAa,CAAC,MAAM;AAClB,SACE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,QAAjC,CADX;AAEE,IAAA,SAAS,EAAE8B,UAFb;AAGE,IAAA,MAAM,EAAE,CAACS,OAAD,EAAU;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAAV,KACNF,OAAO,CAACI,GAAR,CAAYC,MAAM,IAChB,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAEJ,GAArB;AAA0B,MAAA,GAAG,EAAEI,MAAM,CAACX,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AAAe,MAAA,SAAS,EAAEQ,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiCG,MAAM,CAACb,IAAxC,CADF,EAEE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAEU,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6BG,MAAM,CAACZ,IAApC,CAFF,EAGE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAES,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6BG,MAAM,CAACX,IAApC,CAHF,EAIE,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAEQ,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BG,MAAM,CAACV,IAAnC,CAJF,EAKE,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAEO,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8BG,MAAM,CAACT,MAArC,CALF,CADF,CAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAiBD,CAlBY,CAHjB,EAsBE;AAAEnB,EAAAA,KAAK,EAAE;AAAE6B,IAAAA,QAAQ,EAAE7B;AAAZ;AAAT,CAtBF;AAyBAY,OAAO,CAACQ,GAAR,CACE,aADF,EAEE,MACEpC,aAAa,CAAC,MAAM;AAClB,SACE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,QAAjC,EAA2C,EAA3C,CADX;AAEE,IAAA,SAAS,EAAE8B,UAFb;AAGE,IAAA,MAAM,EAAE,CAACS,OAAD,EAAU;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,IAAP;AAAaR,MAAAA,IAAb;AAAmBS,MAAAA;AAAnB,KAAV,KACNH,OAAO,CAACI,GAAR,CAAYC,MAAM,IAChB,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAEJ,GAArB;AAA0B,MAAA,GAAG,EAAEI,MAAM,CAACX,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AAAe,MAAA,SAAS,EAAEQ,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiCG,MAAM,CAACb,IAAxC,CADF,EAEE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAEU,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6BG,MAAM,CAACZ,IAApC,CAFF,EAGE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAES,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6BG,MAAM,CAACX,IAApC,CAHF,EAIE,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAEQ,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BG,MAAM,CAACV,IAAnC,CAJF,EAKE,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAEO,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8BG,MAAM,CAACT,MAArC,CALF,EAME,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAEM,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAEC,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CANF,CADF,CAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAoBD,CArBY,CAHjB,EAyBE;AAAE1B,EAAAA,KAAK,EAAE;AAAE6B,IAAAA,QAAQ,EAAE7B;AAAZ;AAAT,CAzBF","sourcesContent":["import React, { createElement, useState } from \"react\";\nimport { storiesOf } from \"@storybook/react\";\nimport { AsyncTable } from \"..\";\nimport { TableRow, TableCell } from \"@material-ui/core\";\nimport { Settings } from \"@material-ui/icons\";\nimport { UnderlineCell, ActiveCell, LiveCell } from \"../../table-cells\";\nimport { FileCopyOutlined as Icon } from \"@material-ui/icons\";\nimport { mdiContentCopy } from \"@mdi/js\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport notes from \"./notes.md\";\n\nconst LightTooltip = withStyles(theme => ({\n  tooltip: {\n    backgroundColor: theme.palette.common.white,\n    color: \"rgba(0, 0, 0, 0.87)\",\n    boxShadow: theme.shadows[1],\n    fontSize: 11\n  }\n}))(Tooltip);\n\nconst stories = storiesOf(\"Async Table\", module);\n\nconst sampleData = [\n  {\n    name: \"test\",\n    slug: \"test\",\n    uuid: \"3d83a30c-0431-11ea-b33e-0242ac110011\",\n    live: true,\n    active: true\n  },\n  {\n    name: \"test\",\n    slug: \"test\",\n    uuid: \"3d83a30c-0431-11ea-b33e-0242ac110014\",\n    live: false,\n    active: false\n  }\n];\n\nstories.add(\n  \"default\",\n  () =>\n    createElement(() => {\n      const [copy, setCopy] = useState(false);\n      return (\n        <AsyncTable\n          headers={[\"Name\", \"Slug\", \"UUID\"]}\n          tableData={sampleData}\n          render={(samples, { row, cell, uuid, icon }) =>\n            samples.map(sample => (\n              <TableRow className={row} key={sample.uuid}>\n                <TableCell className={cell}>{sample.name}</TableCell>\n                <TableCell className={cell}>{sample.slug}</TableCell>\n                <TableCell className={uuid}>\n                  <p>{sample.uuid}</p>\n                  <CopyToClipboard\n                    text={sample.uuid}\n                    onCopy={() => setCopy(true)}\n                    onPointerLeave={() => setCopy(false)}\n                  >\n                    {copy ? (\n                      <LightTooltip title=\"UUID Copied!\" placement=\"top\">\n                        <Icon\n                          className={icon}\n                          path={mdiContentCopy}\n                          size={1}\n                          rotate={360}\n                        />\n                      </LightTooltip>\n                    ) : (\n                      <LightTooltip title=\"Copy UUID\" placement=\"top\">\n                        <Icon\n                          className={icon}\n                          path={mdiContentCopy}\n                          size={1}\n                          rotate={360}\n                        />\n                      </LightTooltip>\n                    )}\n                  </CopyToClipboard>\n                </TableCell>\n              </TableRow>\n            ))\n          }\n        />\n      );\n    }),\n  { notes: { markdown: notes } }\n);\n\nstories.add(\n  \"with underline cell\",\n  () =>\n    createElement(() => {\n      const [copy, setCopy] = useState(false);\n      return (\n        <AsyncTable\n          headers={[\"Name\", \"Slug\", \"UUID\"]}\n          tableData={sampleData}\n          render={(samples, { row, cell }) =>\n            samples.map(sample => (\n              <TableRow className={row} key={sample.uuid}>\n                <UnderlineCell className={cell}>{sample.name}</UnderlineCell>\n                <TableCell className={cell}>{sample.slug}</TableCell>\n                <TableCell className={cell}>{sample.uuid}</TableCell>\n              </TableRow>\n            ))\n          }\n        />\n      );\n    }),\n  { notes: { markdown: notes } }\n);\n\nstories.add(\n  \"with live cell\",\n  () =>\n    createElement(() => {\n      return (\n        <AsyncTable\n          headers={[\"Name\", \"Slug\", \"UUID\", \"live\"]}\n          tableData={sampleData}\n          render={(samples, { row, cell }) =>\n            samples.map(sample => (\n              <TableRow className={row} key={sample.uuid}>\n                <UnderlineCell className={cell}>{sample.name}</UnderlineCell>\n                <TableCell className={cell}>{sample.slug}</TableCell>\n                <TableCell className={cell}>{sample.uuid}</TableCell>\n                <LiveCell className={cell}>{sample.live}</LiveCell>\n              </TableRow>\n            ))\n          }\n        />\n      );\n    }),\n  { notes: { markdown: notes } }\n);\n\nstories.add(\n  \"with active cell\",\n  () =>\n    createElement(() => {\n      return (\n        <AsyncTable\n          headers={[\"Name\", \"Slug\", \"UUID\", \"live\", \"active\"]}\n          tableData={sampleData}\n          render={(samples, { row, cell }) =>\n            samples.map(sample => (\n              <TableRow className={row} key={sample.uuid}>\n                <UnderlineCell className={cell}>{sample.name}</UnderlineCell>\n                <TableCell className={cell}>{sample.slug}</TableCell>\n                <TableCell className={cell}>{sample.uuid}</TableCell>\n                <LiveCell className={cell}>{sample.live}</LiveCell>\n                <ActiveCell className={cell}>{sample.active}</ActiveCell>\n              </TableRow>\n            ))\n          }\n        />\n      );\n    }),\n  { notes: { markdown: notes } }\n);\n\nstories.add(\n  \"with button\",\n  () =>\n    createElement(() => {\n      return (\n        <AsyncTable\n          headers={[\"Name\", \"Slug\", \"UUID\", \"live\", \"active\", \"\"]}\n          tableData={sampleData}\n          render={(samples, { row, cell, uuid, icon }) =>\n            samples.map(sample => (\n              <TableRow className={row} key={sample.uuid}>\n                <UnderlineCell className={cell}>{sample.name}</UnderlineCell>\n                <TableCell className={cell}>{sample.slug}</TableCell>\n                <TableCell className={cell}>{sample.uuid}</TableCell>\n                <LiveCell className={cell}>{sample.live}</LiveCell>\n                <ActiveCell className={cell}>{sample.active}</ActiveCell>\n                <TableCell className={cell}>\n                  <Settings className={icon} />\n                </TableCell>\n              </TableRow>\n            ))\n          }\n        />\n      );\n    }),\n  { notes: { markdown: notes } }\n);\n"]},"metadata":{},"sourceType":"module"}