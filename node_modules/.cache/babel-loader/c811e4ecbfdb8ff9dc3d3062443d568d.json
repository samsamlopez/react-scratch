{"ast":null,"code":"import _slicedToArray from \"/home/webdev/Documents/react-portal/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/webdev/Documents/react-portal/src/components/manage/users/components/users-table/index.tsx\";\nimport React, { useState } from \"react\";\nimport { TableRow, TableCell } from \"@material-ui/core\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { FileCopyOutlined as Icon } from \"@material-ui/icons\";\nimport { AsyncTable, ActiveCell, EditButton, TableLoader, UnderlineCell } from \"common-components\";\nimport { mdiContentCopy } from \"@mdi/js\";\nimport { LightTooltip } from \"../styles\";\nimport { USER_HEADERS } from \"./constants\";\n\nconst UserTable = ({\n  users,\n  loading\n}) => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        copy = _useState2[0],\n        setCopy = _useState2[1];\n\n  const filterKeys = data => {\n    let username = data.username,\n        first_name = data.first_name,\n        last_name = data.last_name,\n        email = data.email,\n        uuid = data.uuid,\n        hire_date = data.hire_date,\n        date_joined = data.date_joined,\n        is_active = data.is_active;\n    let filtered_data = {\n      username,\n      first_name,\n      last_name,\n      email,\n      uuid,\n      hire_date,\n      date_joined,\n      active: is_active\n    };\n    return filtered_data;\n  };\n\n  const getClassName = (i, {\n    uuid,\n    userCell\n  }) => {\n    switch (i) {\n      case 4:\n        return uuid;\n        break;\n\n      default:\n        return userCell;\n    }\n  };\n\n  const renderIcon = (cellVal, iconProps) => {\n    return React.createElement(CopyToClipboard, {\n      text: cellVal,\n      onCopy: () => setCopy(true),\n      onPointerLeave: () => setCopy(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, copy ? React.createElement(LightTooltip, {\n      title: \"UUID Copied!\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Icon, Object.assign({}, iconProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }))) : React.createElement(LightTooltip, {\n      title: \"Copy UUID\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Icon, Object.assign({}, iconProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }))));\n  };\n\n  const renderCells = (userData, styleProps) => Object.values(userData).map((cellVal, i) => {\n    let cellStyle = getClassName(i, styleProps);\n    let icon = styleProps.icon;\n    const iconProps = {\n      className: icon,\n      path: mdiContentCopy,\n      size: 1,\n      rotate: 360\n    };\n    return React.createElement(React.Fragment, null, i > 0 ? React.createElement(TableCell, {\n      key: i,\n      className: cellStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, i !== 7 ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, cellVal) : React.createElement(ActiveCell, {\n      className: cellStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, true), i === 4 && renderIcon(cellVal, iconProps)) : React.createElement(UnderlineCell, {\n      className: cellStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        color: \"rgb(68, 72, 81)\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, cellVal)));\n  });\n\n  const renderRows = (userData, styleProps) => {\n    let usersInfo = filterKeys(userData);\n    return React.createElement(TableRow, {\n      className: styleProps.row,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, renderCells(usersInfo, styleProps), React.createElement(TableCell, {\n      className: styleProps.userCell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(EditButton, {\n      text: \"Edit\",\n      onClickFunc: () => console.log(\"Click\") //getUserData(example)}\n      ,\n      style: {\n        color: \"#444851\"\n      },\n      iconStyle: {},\n      textStyle: {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })));\n  };\n\n  const renderUserTable = () => {\n    return React.createElement(AsyncTable, {\n      headers: USER_HEADERS,\n      tableData: users,\n      render: (userData, styleProps) => userData.map(user => renderRows(user, styleProps)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, loading ? React.createElement(TableLoader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }) : renderUserTable()));\n};\n\nexport default UserTable;","map":{"version":3,"sources":["/home/webdev/Documents/react-portal/src/components/manage/users/components/users-table/index.tsx"],"names":["React","useState","TableRow","TableCell","CopyToClipboard","FileCopyOutlined","Icon","AsyncTable","ActiveCell","EditButton","TableLoader","UnderlineCell","mdiContentCopy","LightTooltip","USER_HEADERS","UserTable","users","loading","copy","setCopy","filterKeys","data","username","first_name","last_name","email","uuid","hire_date","date_joined","is_active","filtered_data","active","getClassName","i","userCell","renderIcon","cellVal","iconProps","renderCells","userData","styleProps","Object","values","map","cellStyle","icon","className","path","size","rotate","color","renderRows","usersInfo","row","console","log","renderUserTable","user"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { TableRow, TableCell } from \"@material-ui/core\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { FileCopyOutlined as Icon } from \"@material-ui/icons\";\nimport {\n  AsyncTable,\n  ActiveCell,\n  EditButton,\n  TableLoader,\n  UnderlineCell\n} from \"common-components\";\nimport { mdiContentCopy } from \"@mdi/js\";\nimport { LightTooltip } from \"../styles\";\nimport { USER_HEADERS } from \"./constants\";\ntype Props = {\n  users: any;\n  loading?: boolean;\n};\n\nconst UserTable: React.FC<Props> = ({ users, loading }) => {\n  const [copy, setCopy] = useState(false);\n  const filterKeys: Function = (data: any) => {\n    let {\n      username,\n      first_name,\n      last_name,\n      email,\n      uuid,\n      hire_date,\n      date_joined,\n      is_active\n    } = data;\n    let filtered_data = {\n      username,\n      first_name,\n      last_name,\n      email,\n      uuid,\n      hire_date,\n      date_joined,\n      active: is_active\n    };\n    return filtered_data;\n  };\n\n  const getClassName: Function = (i: number, { uuid, userCell }: any) => {\n    switch (i) {\n      case 4:\n        return uuid;\n        break;\n      default:\n        return userCell;\n    }\n  };\n\n  const renderIcon: Function = (cellVal: any, iconProps: any) => {\n    return (\n      <CopyToClipboard\n        text={cellVal}\n        onCopy={() => setCopy(true)}\n        onPointerLeave={() => setCopy(false)}\n      >\n        {copy ? (\n          <LightTooltip title=\"UUID Copied!\" placement=\"top\">\n            <Icon {...iconProps} />\n          </LightTooltip>\n        ) : (\n          <LightTooltip title=\"Copy UUID\" placement=\"top\">\n            <Icon {...iconProps} />\n          </LightTooltip>\n        )}\n      </CopyToClipboard>\n    );\n  };\n\n  const renderCells: Function = (userData: any, styleProps: any) =>\n    Object.values(userData).map((cellVal: any, i: number) => {\n      let cellStyle = getClassName(i, styleProps);\n      let { icon } = styleProps;\n      const iconProps = {\n        className: icon,\n        path: mdiContentCopy,\n        size: 1,\n        rotate: 360\n      };\n      return (\n        <>\n          {i > 0 ? (\n            <TableCell key={i} className={cellStyle}>\n              {i !== 7 ? (\n                <p>{cellVal}</p>\n              ) : (\n                <ActiveCell className={cellStyle}>{true}</ActiveCell>\n              )}\n\n              {i === 4 && renderIcon(cellVal, iconProps)}\n            </TableCell>\n          ) : (\n            <UnderlineCell className={cellStyle}>\n              <p style={{ color: \"rgb(68, 72, 81)\" }}>{cellVal}</p>\n            </UnderlineCell>\n          )}\n        </>\n      );\n    });\n\n  const renderRows: Function = (userData: any, styleProps: any) => {\n    let usersInfo = filterKeys(userData);\n    return (\n      <TableRow className={styleProps.row}>\n        {renderCells(usersInfo, styleProps)}\n        <TableCell className={styleProps.userCell}>\n          <EditButton\n            text=\"Edit\"\n            onClickFunc={() => console.log(\"Click\")} //getUserData(example)}\n            style={{\n              color: \"#444851\"\n            }}\n            iconStyle={{}}\n            textStyle={{}}\n          />\n        </TableCell>\n      </TableRow>\n    );\n  };\n\n  const renderUserTable: Function = () => {\n    return (\n      <AsyncTable\n        headers={USER_HEADERS}\n        tableData={users}\n        render={(userData: any, styleProps: any) =>\n          userData.map((user: any) => renderRows(user, styleProps))\n        }\n      />\n    );\n  };\n  return (\n    <>\n      <div>{loading ? <TableLoader /> : renderUserTable()}</div>\n    </>\n  );\n};\n\nexport default UserTable;\n"]},"metadata":{},"sourceType":"module"}