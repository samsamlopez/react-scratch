{"ast":null,"code":"var _jsxFileName = \"/home/webdev/Documents/react-portal/src/components/manage/manage-realms/settings/index.js\";\nimport React, { Component } from \"react\"; // import NavTabs from \"../../../common-components/nav-tabs/Settings-menu-bar\";\n\n/*COMPONENTS*/\n\nimport { TableLoader } from \"common-components\"; // import { get, patch, post, cancel, getGroups } from \"../../../../utils/api\";\n// import RealmSettings from \"./realmSettings\";\n\nclass RealmSettingsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataLoaded: false,\n      realm: null,\n      active: null,\n      name: \"\",\n      saveLoader: false,\n      campaigns: [],\n      paginateList: [],\n      campaignsOrig: []\n    };\n    this.initialData = {};\n  } // async componentDidMount() {\n  //   let active, name;\n  //   await get(`/identity/realm/${this.props.match.params.uuid}/`).then(\n  //     result => {\n  //       active = result.data.active;\n  //       name = result.data.name;\n  //       this.setState({\n  //         realm: result.data,\n  //         active,\n  //         name,\n  //         campaigns: result.data.campaigns,\n  //         campaignsOrig: result.data.campaigns,\n  //         paginateList: result.data.campaigns\n  //       });\n  //     }\n  //   );\n  //   this.initialData = { active, name };\n  //   this.setState({ dataLoaded: true });\n  // }\n  // handleActive = () => {\n  //   this.setState({\n  //     active: !this.state.active\n  //   });\n  // };\n  // handleName = value => {\n  //   this.setState({ name: value });\n  // };\n  // updateRealm = () => {\n  //   const { active, name, campaigns, paginateList } = this.state;\n  //   this.setState({ saveLoader: true });\n  //   patch(`/identity/realm/${this.props.match.params.uuid}/`, {\n  //     active,\n  //     name,\n  //     campaigns: paginateList\n  //   }).then(res => {\n  //     this.initialData = { active: res.data.active, name: res.data.name };\n  //     this.setState({\n  //       realm: res.data,\n  //       saveLoader: false,\n  //       active: res.data.active,\n  //       name: res.data.name\n  //     });\n  //   });\n  // };\n  // addCampaign = async campaign => {\n  //   let arrCamp = [...campaign, ...this.state.campaignsOrig];\n  //   /* campaign.map(camp => {\n  //     arrCamp.push(camp);\n  //   }); */\n  //   this.setState({\n  //     campaigns: arrCamp,\n  //     campaignsOrig: arrCamp,\n  //     paginateList: arrCamp\n  //   });\n  //   const update = await patch(\n  //     `/identity/realm/${this.props.match.params.uuid}/`,\n  //     {\n  //       campaigns: arrCamp\n  //     }\n  //   );\n  //   return update;\n  // };\n  // removeCampaign = async uuid => {\n  //   var campaigns = this.state.paginateList.filter(camp => {\n  //     return camp.uuid !== uuid;\n  //   });\n  //   this.setState({ campaigns, paginateList: campaigns });\n  //   const update = await patch(\n  //     `/identity/realm/${this.props.match.params.uuid}/`,\n  //     { campaigns }\n  //   );\n  //   return update;\n  // };\n  // paginate = (from, to) => {\n  //   const campaigns = this.state.paginateList.slice(from, to);\n  //   this.setState({ campaigns });\n  // };\n\n\n  render() {\n    const _this$state = this.state,\n          realm = _this$state.realm,\n          active = _this$state.active,\n          name = _this$state.name,\n          dataLoaded = _this$state.dataLoaded,\n          campaigns = _this$state.campaigns,\n          saveLoader = _this$state.saveLoader,\n          paginateList = _this$state.paginateList;\n    var edit = JSON.stringify(this.initialData) === JSON.stringify({\n      active,\n      name\n    }) ? false : this.state.name.length === 0 ? false : true;\n\n    if (dataLoaded) {\n      return React.createElement(React.Fragment, null, React.createElement(TableLoader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(TableLoader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport { RealmSettingsPage };","map":{"version":3,"sources":["/home/webdev/Documents/react-portal/src/components/manage/manage-realms/settings/index.js"],"names":["React","Component","TableLoader","RealmSettingsPage","constructor","props","state","dataLoaded","realm","active","name","saveLoader","campaigns","paginateList","campaignsOrig","initialData","render","edit","JSON","stringify","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA;;AACA,SAASC,WAAT,QAA4B,mBAA5B,C,CAEA;AAEA;;AAEA,MAAMC,iBAAN,SAAgCF,SAAhC,CAA0C;AACxCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,KADD;AAEXC,MAAAA,KAAK,EAAE,IAFI;AAGXC,MAAAA,MAAM,EAAE,IAHG;AAIXC,MAAAA,IAAI,EAAE,EAJK;AAKXC,MAAAA,UAAU,EAAE,KALD;AAMXC,MAAAA,SAAS,EAAE,EANA;AAOXC,MAAAA,YAAY,EAAE,EAPH;AAQXC,MAAAA,aAAa,EAAE;AARJ,KAAb;AAUA,SAAKC,WAAL,GAAmB,EAAnB;AACD,GAfuC,CAiBxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEAC,EAAAA,MAAM,GAAG;AAAA,wBASH,KAAKV,KATF;AAAA,UAELE,KAFK,eAELA,KAFK;AAAA,UAGLC,MAHK,eAGLA,MAHK;AAAA,UAILC,IAJK,eAILA,IAJK;AAAA,UAKLH,UALK,eAKLA,UALK;AAAA,UAMLK,SANK,eAMLA,SANK;AAAA,UAOLD,UAPK,eAOLA,UAPK;AAAA,UAQLE,YARK,eAQLA,YARK;AAUP,QAAII,IAAI,GACNC,IAAI,CAACC,SAAL,CAAe,KAAKJ,WAApB,MAAqCG,IAAI,CAACC,SAAL,CAAe;AAAEV,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAf,CAArC,GACI,KADJ,GAEI,KAAKJ,KAAL,CAAWI,IAAX,CAAgBU,MAAhB,KAA2B,CAA3B,GACE,KADF,GAEE,IALR;;AAMA,QAAIb,UAAJ,EAAgB;AACd,aACE,0CACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AA6BD,KA9BD,MA8BO;AACL,aAAO,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;AACF;;AAxJuC;;AA2J1C,SAASJ,iBAAT","sourcesContent":["import React, { Component } from \"react\";\n// import NavTabs from \"../../../common-components/nav-tabs/Settings-menu-bar\";\n/*COMPONENTS*/\nimport { TableLoader } from \"common-components\";\n\n// import { get, patch, post, cancel, getGroups } from \"../../../../utils/api\";\n\n// import RealmSettings from \"./realmSettings\";\n\nclass RealmSettingsPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dataLoaded: false,\n      realm: null,\n      active: null,\n      name: \"\",\n      saveLoader: false,\n      campaigns: [],\n      paginateList: [],\n      campaignsOrig: []\n    };\n    this.initialData = {};\n  }\n\n  // async componentDidMount() {\n  //   let active, name;\n  //   await get(`/identity/realm/${this.props.match.params.uuid}/`).then(\n  //     result => {\n  //       active = result.data.active;\n  //       name = result.data.name;\n  //       this.setState({\n  //         realm: result.data,\n  //         active,\n  //         name,\n  //         campaigns: result.data.campaigns,\n  //         campaignsOrig: result.data.campaigns,\n  //         paginateList: result.data.campaigns\n  //       });\n  //     }\n  //   );\n  //   this.initialData = { active, name };\n  //   this.setState({ dataLoaded: true });\n  // }\n\n  // handleActive = () => {\n  //   this.setState({\n  //     active: !this.state.active\n  //   });\n  // };\n\n  // handleName = value => {\n  //   this.setState({ name: value });\n  // };\n\n  // updateRealm = () => {\n  //   const { active, name, campaigns, paginateList } = this.state;\n  //   this.setState({ saveLoader: true });\n  //   patch(`/identity/realm/${this.props.match.params.uuid}/`, {\n  //     active,\n  //     name,\n  //     campaigns: paginateList\n  //   }).then(res => {\n  //     this.initialData = { active: res.data.active, name: res.data.name };\n  //     this.setState({\n  //       realm: res.data,\n  //       saveLoader: false,\n  //       active: res.data.active,\n  //       name: res.data.name\n  //     });\n  //   });\n  // };\n\n  // addCampaign = async campaign => {\n  //   let arrCamp = [...campaign, ...this.state.campaignsOrig];\n\n  //   /* campaign.map(camp => {\n  //     arrCamp.push(camp);\n  //   }); */\n\n  //   this.setState({\n  //     campaigns: arrCamp,\n  //     campaignsOrig: arrCamp,\n  //     paginateList: arrCamp\n  //   });\n  //   const update = await patch(\n  //     `/identity/realm/${this.props.match.params.uuid}/`,\n  //     {\n  //       campaigns: arrCamp\n  //     }\n  //   );\n  //   return update;\n  // };\n\n  // removeCampaign = async uuid => {\n  //   var campaigns = this.state.paginateList.filter(camp => {\n  //     return camp.uuid !== uuid;\n  //   });\n  //   this.setState({ campaigns, paginateList: campaigns });\n  //   const update = await patch(\n  //     `/identity/realm/${this.props.match.params.uuid}/`,\n  //     { campaigns }\n  //   );\n  //   return update;\n  // };\n\n  // paginate = (from, to) => {\n  //   const campaigns = this.state.paginateList.slice(from, to);\n  //   this.setState({ campaigns });\n  // };\n\n  render() {\n    const {\n      realm,\n      active,\n      name,\n      dataLoaded,\n      campaigns,\n      saveLoader,\n      paginateList\n    } = this.state;\n    var edit =\n      JSON.stringify(this.initialData) === JSON.stringify({ active, name })\n        ? false\n        : this.state.name.length === 0\n          ? false\n          : true;\n    if (dataLoaded) {\n      return (\n        <>\n          <TableLoader />\n          {/* <NavTabs\n            data={realm}\n            tabnames={[]}\n            history={realm}\n            back={{\n              name: \"Back to realms\",\n              url: \"/manage/realms/\"\n            }}\n          />\n          <RealmSettings\n            active={active}\n            realm={realm}\n            handleActive={this.handleActive}\n            handleName={this.handleName}\n            edit={edit}\n            updateRealm={this.updateRealm}\n            saveLoader={saveLoader}\n            campaigns={campaigns}\n            campaignsOrig={this.state.campaignsOrig}\n            removeCampaign={this.removeCampaign}\n            paginateList={paginateList}\n            paginateFn={this.paginate}\n            addCampaign={this.addCampaign}\n          /> */}\n        </>\n      );\n    } else {\n      return <TableLoader />;\n    }\n  }\n}\n\nexport { RealmSettingsPage };\n"]},"metadata":{},"sourceType":"module"}