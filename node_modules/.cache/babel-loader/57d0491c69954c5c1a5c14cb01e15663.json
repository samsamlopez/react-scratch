{"ast":null,"code":"import _slicedToArray from \"/home/webdev/Documents/react-portal/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/webdev/Documents/react-portal/src/components/manage/users/users-new/steps/SetupPassword.tsx\";\nimport React, { useState } from \"react\";\nimport { Typography, Grid, FormControl, FormHelperText, InputLabel, Input } from \"@material-ui/core\";\nimport { useStyles } from \"../styles\";\n\nconst SetupPassword = ({\n  disabled,\n  setDisabled\n}) => {\n  const classes = useStyles(0);\n\n  const _useState = useState({\n    original: false,\n    confirm: false\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        passwordError = _useState2[0],\n        setPasswordError = _useState2[1];\n\n  function handlePasswords(event, type) {}\n\n  return React.createElement(\"div\", {\n    style: {\n      minWidth: 360,\n      minHeight: 320,\n      margin: \"0 auto\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.p,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Setup password\"), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    fullWidth: true,\n    error: passwordError.original,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    classes: {\n      focused: classes.focused,\n      error: classes.err\n    },\n    htmlFor: \"fname\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Enter password\"), React.createElement(Input, {\n    \"data-cy\": \"password\",\n    type: \"password\",\n    classes: {\n      underline: classes.underline\n    },\n    autoComplete: \"new-password\",\n    required: true,\n    value: passwordError.original,\n    onChange: e => handlePasswords(e, \"password\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), React.createElement(FormHelperText, {\n    \"data-cy\": \"password-error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, passwordError.original && \"Password Msg\"))), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    fullWidth: true,\n    error: passwordError.confirm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    classes: {\n      focused: classes.focused,\n      error: classes.err\n    },\n    htmlFor: \"fname\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Re-enter password\"), React.createElement(Input, {\n    \"data-cy\": \"re-password\",\n    type: \"password\",\n    classes: {\n      underline: classes.underline\n    },\n    autoComplete: \"new-password\",\n    value: passwordError.confirm,\n    onChange: e => handlePasswords(e, \"repassword\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(FormHelperText, {\n    \"data-cy\": \"re-password-error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, passwordError.confirm && \"Repass Error\"))), React.createElement(Typography, {\n    className: classes.note,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"*The password must contains at least 10 characters.\"));\n};\n\nexport { SetupPassword as Setup };","map":{"version":3,"sources":["/home/webdev/Documents/react-portal/src/components/manage/users/users-new/steps/SetupPassword.tsx"],"names":["React","useState","Typography","Grid","FormControl","FormHelperText","InputLabel","Input","useStyles","SetupPassword","disabled","setDisabled","classes","original","confirm","passwordError","setPasswordError","handlePasswords","event","type","minWidth","minHeight","margin","p","focused","error","err","underline","e","note","Setup"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Typography,\n  Grid,\n  FormControl,\n  FormHelperText,\n  InputLabel,\n  Input\n} from \"@material-ui/core\";\nimport { useStyles } from \"../styles\";\n\ntype Props = {\n  disabled: any;\n  setDisabled: any;\n};\n\nconst SetupPassword = ({ disabled, setDisabled }: Props) => {\n  const classes = useStyles(0);\n  const [passwordError, setPasswordError] = useState({\n    original: false,\n    confirm: false\n  });\n\n  function handlePasswords(event: any, type: string) {}\n\n  return (\n    <div\n      style={{\n        minWidth: 360,\n        minHeight: 320,\n        margin: \"0 auto\"\n      }}\n    >\n      <Typography className={classes.p}>Setup password</Typography>\n\n      <Grid item xs>\n        <FormControl fullWidth error={passwordError.original}>\n          <InputLabel\n            classes={{ focused: classes.focused, error: classes.err }}\n            htmlFor=\"fname\"\n            required\n          >\n            Enter password\n          </InputLabel>\n          <Input\n            data-cy=\"password\"\n            type=\"password\"\n            classes={{ underline: classes.underline }}\n            autoComplete=\"new-password\"\n            required\n            value={passwordError.original}\n            onChange={(e) => handlePasswords(e, \"password\")}\n          />\n          <FormHelperText data-cy=\"password-error\">\n            {passwordError.original && \"Password Msg\"}\n          </FormHelperText>\n        </FormControl>\n      </Grid>\n\n      <Grid item xs>\n        <FormControl fullWidth error={passwordError.confirm}>\n          <InputLabel\n            classes={{ focused: classes.focused, error: classes.err }}\n            htmlFor=\"fname\"\n            required\n          >\n            Re-enter password\n          </InputLabel>\n          <Input\n            data-cy=\"re-password\"\n            type=\"password\"\n            classes={{ underline: classes.underline }}\n            autoComplete=\"new-password\"\n            value={passwordError.confirm}\n            onChange={(e) => handlePasswords(e, \"repassword\")}\n          />\n          <FormHelperText data-cy=\"re-password-error\">\n            {passwordError.confirm && \"Repass Error\"}\n          </FormHelperText>\n        </FormControl>\n      </Grid>\n\n      <Typography className={classes.note}>\n        *The password must contains at least 10 characters.\n      </Typography>\n    </div>\n  );\n};\n\nexport { SetupPassword as Setup };\n"]},"metadata":{},"sourceType":"module"}