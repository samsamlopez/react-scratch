{"ast":null,"code":"import _slicedToArray from \"/home/webdev/Documents/react-portal/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/webdev/Documents/react-portal/src/components/manage/manage-realms/settings/campaigns.js\";\nimport React, { useState } from \"react\";\nimport { Tooltip, Dialog } from \"@material-ui/core\";\nimport { GroupOutlined, Add, FileCopyOutlined as Icon, Remove, Error } from \"@material-ui/icons/\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styled from \"styled-components\";\nimport { TableRow, TableCell } from \"@material-ui/core\";\nimport { mdiContentCopy } from \"@mdi/js\";\nimport { ActiveCell, AsyncTable, SuccessModal, LoadingModal, AddCampaignModal, Pagination, TableLoader } from \"common-components\";\nconst LightTooltip = withStyles(theme => ({\n  tooltip: {\n    backgroundColor: theme.palette.common.white,\n    color: \"rgba(0, 0, 0, 0.87)\",\n    boxShadow: theme.shadows[1],\n    fontSize: 11\n  }\n}))(Tooltip);\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 145px;\n  padding: 5px 20px;\n  border-radius: 3px;\n  background-color: #fafafa;\n  margin: 10px 0;\n`;\nconst P = styled.p`\n  font-size: 16px;\n  color: #777777;\n`;\nconst AddCamp = styled.button`\n  cursor: pointer;\n  border: none;\n  outline: none;\n  color: #1194f6;\n  font-size: 16px;\n  background: inherit;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst RemoveBtn = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  cursor: pointer;\n  text-decoration: underline;\n  color: #444851;\n`;\nconst IdCont = styled.span`\n  width: 278px;\n  padding: 12px 0px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`;\nconst RealmName = styled.p`\n  width: fit-content;\n  text-decoration: underline;\n  color: #444851;\n`;\nconst NoDiv = styled.div`\n  min-height: 400px;\n`;\nconst GridDiv = styled.div`\n  display: grid;\n  justify-items: center;\n  margin-top: 150px;\n`;\nconst NoCamp = styled.p`\n  font-size: 18px;\n  text-align: center;\n  color: #7c8a97;\n`;\nconst NoCampSub = styled.p`\n  font-size: 16px;\n  text-align: center;\n  color: #777777;\n  max-width: 355px;\n`;\nexport default function CampaignSettings(props) {\n  const data = props.data,\n        removeCampaign = props.removeCampaign,\n        realm = props.realm,\n        paginateList = props.paginateList,\n        paginateFn = props.paginateFn,\n        addCampaign = props.addCampaign,\n        campaignsOrig = props.campaignsOrig;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        copy = _useState4[0],\n        setCopy = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        selected = _useState6[0],\n        setSelected = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        openDelete = _useState8[0],\n        setOpenDelete = _useState8[1];\n\n  const _useState9 = useState(\"warn\"),\n        _useState10 = _slicedToArray(_useState9, 2),\n        modalType = _useState10[0],\n        setModalType = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        openAdd = _useState12[0],\n        setOpenAdd = _useState12[1];\n\n  const _useState13 = useState(\"\"),\n        _useState14 = _slicedToArray(_useState13, 2),\n        text = _useState14[0],\n        setText = _useState14[1];\n\n  const openFunc = () => {\n    setOpenAdd(!openAdd);\n  };\n\n  const removeFn = () => {\n    setModalType(\"loading\");\n    setText(\"One moment. We're removing the campaign...\");\n    setTimeout(async () => {\n      const data = await removeCampaign(selected.uuid);\n\n      if (data.status === 200) {\n        setModalType(\"success\");\n        setText(`You have removed \"${selected.name}\" from ${realm.name}`);\n      }\n    }, 2000);\n  };\n\n  const closeFn = () => {\n    setOpenDelete(false);\n    setTimeout(() => {\n      setModalType(\"warn\");\n    }, 800);\n  };\n\n  const addCamp = () => {\n    setOpenDelete(false);\n    setOpenAdd(true);\n    setTimeout(() => {\n      setModalType(\"warn\");\n    }, 800);\n  };\n\n  const campFn = async camps => {\n    setSelected(true);\n    setModalType(\"loading\");\n    setText(\"One moment. We're adding the campaigns...\");\n    setTimeout(() => {\n      setOpenAdd(false);\n      setOpenDelete(true);\n    }, 500);\n    const data = await addCampaign(camps);\n\n    if (data.status) {\n      setText(\"Successfully added campaigns\");\n      setModalType(\"success\");\n    }\n  };\n\n  return loading ? React.createElement(TableLoader, {\n    headerText: \"Management\",\n    message: \"Loading campaigns...\",\n    Icon: GroupOutlined,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }) : React.createElement(React.Fragment, null, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(P, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, \"You can associate a campaign to this realm right from this page.\"), React.createElement(AddCamp, {\n    onClick: openFunc,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(Add, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }), \"Add Campaign\"), React.createElement(AddCampaignModal, {\n    open: openAdd,\n    openFunc: openFunc,\n    data: campaignsOrig,\n    addCampaign: campFn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  })), data.length > 0 ? React.createElement(AsyncTable, {\n    customHeight: 480,\n    withBorder: true,\n    headers: [\"Name\", \"Slug\", \"UUID\", \"Status\", \"\"],\n    tableData: data,\n    render: (samples, {\n      userCell,\n      row,\n      cell,\n      uuid,\n      icon\n    }) => samples.map(sample => React.createElement(TableRow, {\n      className: row,\n      key: sample.uuid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      className: userCell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(RealmName, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, sample.name)), React.createElement(TableCell, {\n      className: userCell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, sample.slug), React.createElement(TableCell, {\n      className: uuid,\n      text: sample.uuid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(IdCont, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, sample.uuid), React.createElement(CopyToClipboard, {\n      text: sample.uuid,\n      onCopy: () => setCopy(true),\n      onPointerLeave: () => setCopy(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, copy ? React.createElement(LightTooltip, {\n      title: \"UUID Copied!\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      path: mdiContentCopy,\n      className: icon,\n      size: 1,\n      rotate: 360,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    })) : React.createElement(LightTooltip, {\n      title: \"Copy UUID\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      path: mdiContentCopy,\n      className: icon,\n      size: 1,\n      rotate: 360,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    })))), React.createElement(ActiveCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, sample.active), React.createElement(TableCell, {\n      className: cell,\n      align: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(RemoveBtn, {\n      onClick: () => {\n        setSelected(sample);\n        setOpenDelete(true);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(Remove, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }), \"Remove\")))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }) : React.createElement(NoDiv, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, React.createElement(GridDiv, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, React.createElement(Error, {\n    style: {\n      color: \"red\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }), React.createElement(NoCamp, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252\n    },\n    __self: this\n  }, \"There are no campaigns associated with this realm.\"), React.createElement(NoCampSub, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253\n    },\n    __self: this\n  }, \"Would you like to add a campaign? Just hit the \\u201CAdd Campaign\\u201D button.\"))), Boolean(paginateList.length) && React.createElement(Pagination, {\n    paginateFn: paginateFn,\n    totalItems: paginateList.length,\n    paginateList: paginateList,\n    itemsPerPage: 5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }), selected && React.createElement(Dialog, {\n    open: openDelete,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }, modalType === \"warn\" ? React.createElement(SuccessModal, {\n    warning: true,\n    btnText: \"YES, REMOVE\",\n    btnFn: removeFn,\n    closeFn: closeFn,\n    text: `Are you sure you want to remove \"${selected.name}\" from ${realm.name}?`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }) : modalType === \"loading\" ? React.createElement(LoadingModal, {\n    text: text,\n    cancelFn: closeFn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }) : React.createElement(SuccessModal, {\n    btnText: text === \"Successfully added campaigns\" ? \"ADD ANOTHER\" : \"ADD CAMPAIGN\",\n    btnFn: addCamp,\n    closeFn: closeFn,\n    text: text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/home/webdev/Documents/react-portal/src/components/manage/manage-realms/settings/campaigns.js"],"names":["React","useState","Tooltip","Dialog","GroupOutlined","Add","FileCopyOutlined","Icon","Remove","Error","CopyToClipboard","withStyles","styled","TableRow","TableCell","mdiContentCopy","ActiveCell","AsyncTable","SuccessModal","LoadingModal","AddCampaignModal","Pagination","TableLoader","LightTooltip","theme","tooltip","backgroundColor","palette","common","white","color","boxShadow","shadows","fontSize","Grid","div","P","p","AddCamp","button","RemoveBtn","IdCont","span","RealmName","NoDiv","GridDiv","NoCamp","NoCampSub","CampaignSettings","props","data","removeCampaign","realm","paginateList","paginateFn","addCampaign","campaignsOrig","loading","setLoading","copy","setCopy","selected","setSelected","openDelete","setOpenDelete","modalType","setModalType","openAdd","setOpenAdd","text","setText","openFunc","removeFn","setTimeout","uuid","status","name","closeFn","addCamp","campFn","camps","length","samples","userCell","row","cell","icon","map","sample","slug","active","Boolean"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,EAAkBC,MAAlB,QAAgC,mBAAhC;AACA,SACEC,aADF,EAEEC,GAFF,EAGEC,gBAAgB,IAAIC,IAHtB,EAIEC,MAJF,EAKEC,KALF,QAMO,qBANP;AAOA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,mBAApC;AACA,SAASC,cAAT,QAA+B,SAA/B;AACA,SACEC,UADF,EAEEC,UAFF,EAGEC,YAHF,EAIEC,YAJF,EAKEC,gBALF,EAMEC,UANF,EAOEC,WAPF,QAQO,mBARP;AAWA,MAAMC,YAAY,GAAGZ,UAAU,CAACa,KAAK,KAAK;AACxCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,eAAe,EAAEF,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBC,KAD/B;AAEPC,IAAAA,KAAK,EAAE,qBAFA;AAGPC,IAAAA,SAAS,EAAEP,KAAK,CAACQ,OAAN,CAAc,CAAd,CAHJ;AAIPC,IAAAA,QAAQ,EAAE;AAJH;AAD+B,CAAL,CAAN,CAAV,CAOjB/B,OAPiB,CAArB;AASA,MAAMgC,IAAI,GAAGtB,MAAM,CAACuB,GAAI;;;;;;;CAAxB;AASA,MAAMC,CAAC,GAAGxB,MAAM,CAACyB,CAAE;;;CAAnB;AAKA,MAAMC,OAAO,GAAG1B,MAAM,CAAC2B,MAAO;;;;;;;;;;CAA9B;AAYA,MAAMC,SAAS,GAAG5B,MAAM,CAACuB,GAAI;;;;;;;CAA7B;AASA,MAAMM,MAAM,GAAG7B,MAAM,CAAC8B,IAAK;;;;;;CAA3B;AAOA,MAAMC,SAAS,GAAG/B,MAAM,CAACyB,CAAE;;;;CAA3B;AAMA,MAAMO,KAAK,GAAGhC,MAAM,CAACuB,GAAI;;CAAzB;AAIA,MAAMU,OAAO,GAAGjC,MAAM,CAACuB,GAAI;;;;CAA3B;AAMA,MAAMW,MAAM,GAAGlC,MAAM,CAACyB,CAAE;;;;CAAxB;AAMA,MAAMU,SAAS,GAAGnC,MAAM,CAACyB,CAAE;;;;;CAA3B;AAOA,eAAe,SAASW,gBAAT,CAA0BC,KAA1B,EAAiC;AAAA,QAE5CC,IAF4C,GAS1CD,KAT0C,CAE5CC,IAF4C;AAAA,QAG5CC,cAH4C,GAS1CF,KAT0C,CAG5CE,cAH4C;AAAA,QAI5CC,KAJ4C,GAS1CH,KAT0C,CAI5CG,KAJ4C;AAAA,QAK5CC,YAL4C,GAS1CJ,KAT0C,CAK5CI,YAL4C;AAAA,QAM5CC,UAN4C,GAS1CL,KAT0C,CAM5CK,UAN4C;AAAA,QAO5CC,WAP4C,GAS1CN,KAT0C,CAO5CM,WAP4C;AAAA,QAQ5CC,aAR4C,GAS1CP,KAT0C,CAQ5CO,aAR4C;;AAAA,oBAUhBvD,QAAQ,CAAC,KAAD,CAVQ;AAAA;AAAA,QAUvCwD,OAVuC;AAAA,QAU9BC,UAV8B;;AAAA,qBAWtBzD,QAAQ,CAAC,KAAD,CAXc;AAAA;AAAA,QAWvC0D,IAXuC;AAAA,QAWjCC,OAXiC;;AAAA,qBAYd3D,QAAQ,CAAC,IAAD,CAZM;AAAA;AAAA,QAYvC4D,QAZuC;AAAA,QAY7BC,WAZ6B;;AAAA,qBAaV7D,QAAQ,CAAC,KAAD,CAbE;AAAA;AAAA,QAavC8D,UAbuC;AAAA,QAa3BC,aAb2B;;AAAA,qBAcZ/D,QAAQ,CAAC,MAAD,CAdI;AAAA;AAAA,QAcvCgE,SAduC;AAAA,QAc5BC,YAd4B;;AAAA,sBAehBjE,QAAQ,CAAC,KAAD,CAfQ;AAAA;AAAA,QAevCkE,OAfuC;AAAA,QAe9BC,UAf8B;;AAAA,sBAgBtBnE,QAAQ,CAAC,EAAD,CAhBc;AAAA;AAAA,QAgBvCoE,IAhBuC;AAAA,QAgBjCC,OAhBiC;;AAkB9C,QAAMC,QAAQ,GAAG,MAAM;AACrBH,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAFD;;AAIA,QAAMK,QAAQ,GAAG,MAAM;AACrBN,IAAAA,YAAY,CAAC,SAAD,CAAZ;AACAI,IAAAA,OAAO,CAAC,4CAAD,CAAP;AACAG,IAAAA,UAAU,CAAC,YAAY;AACrB,YAAMvB,IAAI,GAAG,MAAMC,cAAc,CAACU,QAAQ,CAACa,IAAV,CAAjC;;AACA,UAAIxB,IAAI,CAACyB,MAAL,KAAgB,GAApB,EAAyB;AACvBT,QAAAA,YAAY,CAAC,SAAD,CAAZ;AACAI,QAAAA,OAAO,CAAE,qBAAoBT,QAAQ,CAACe,IAAK,UAASxB,KAAK,CAACwB,IAAK,EAAxD,CAAP;AACD;AACF,KANS,EAMP,IANO,CAAV;AAOD,GAVD;;AAYA,QAAMC,OAAO,GAAG,MAAM;AACpBb,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAS,IAAAA,UAAU,CAAC,MAAM;AACfP,MAAAA,YAAY,CAAC,MAAD,CAAZ;AACD,KAFS,EAEP,GAFO,CAAV;AAGD,GALD;;AAOA,QAAMY,OAAO,GAAG,MAAM;AACpBd,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAI,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAK,IAAAA,UAAU,CAAC,MAAM;AACfP,MAAAA,YAAY,CAAC,MAAD,CAAZ;AACD,KAFS,EAEP,GAFO,CAAV;AAGD,GAND;;AAQA,QAAMa,MAAM,GAAG,MAAMC,KAAN,IAAe;AAC5BlB,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAI,IAAAA,YAAY,CAAC,SAAD,CAAZ;AACAI,IAAAA,OAAO,CAAC,2CAAD,CAAP;AACAG,IAAAA,UAAU,CAAC,MAAM;AACfL,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAJ,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KAHS,EAGP,GAHO,CAAV;AAIA,UAAMd,IAAI,GAAG,MAAMK,WAAW,CAACyB,KAAD,CAA9B;;AACA,QAAI9B,IAAI,CAACyB,MAAT,EAAiB;AACfL,MAAAA,OAAO,CAAC,8BAAD,CAAP;AACAJ,MAAAA,YAAY,CAAC,SAAD,CAAZ;AACD;AACF,GAbD;;AAeA,SAAOT,OAAO,GACZ,oBAAC,WAAD;AACE,IAAA,UAAU,EAAC,YADb;AAEE,IAAA,OAAO,EAAC,sBAFV;AAGE,IAAA,IAAI,EAAErD,aAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADY,GAOV,0CACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,CAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wEADF,EAEE,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAEmE,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,iBAFF,EAME,oBAAC,gBAAD;AACE,IAAA,IAAI,EAAEJ,OADR;AAEE,IAAA,QAAQ,EAAEI,QAFZ;AAGE,IAAA,IAAI,EAAEf,aAHR;AAIE,IAAA,WAAW,EAAEuB,MAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF,EAcG7B,IAAI,CAAC+B,MAAL,GAAc,CAAd,GACC,oBAAC,UAAD;AACE,IAAA,YAAY,EAAE,GADhB;AAEE,IAAA,UAAU,MAFZ;AAGE,IAAA,OAAO,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,QAAzB,EAAmC,EAAnC,CAHX;AAIE,IAAA,SAAS,EAAE/B,IAJb;AAKE,IAAA,MAAM,EAAE,CAACgC,OAAD,EAAU;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,GAAZ;AAAiBC,MAAAA,IAAjB;AAAuBX,MAAAA,IAAvB;AAA6BY,MAAAA;AAA7B,KAAV,KACNJ,OAAO,CAACK,GAAR,CAAYC,MAAM,IAChB,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAEJ,GAArB;AAA0B,MAAA,GAAG,EAAEI,MAAM,CAACd,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAES,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAYK,MAAM,CAACZ,IAAnB,CADF,CADF,EAIE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAEO,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiCK,MAAM,CAACC,IAAxC,CAJF,EAKE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAEf,IAAtB;AAA4B,MAAA,IAAI,EAAEc,MAAM,CAACd,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASc,MAAM,CAACd,IAAhB,CADF,EAEE,oBAAC,eAAD;AACE,MAAA,IAAI,EAAEc,MAAM,CAACd,IADf;AAEE,MAAA,MAAM,EAAE,MAAMd,OAAO,CAAC,IAAD,CAFvB;AAGE,MAAA,cAAc,EAAE,MAAMA,OAAO,CAAC,KAAD,CAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGD,IAAI,GACH,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAC,cAApB;AAAmC,MAAA,SAAS,EAAC,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AACE,MAAA,IAAI,EAAE5C,cADR;AAEE,MAAA,SAAS,EAAEuE,IAFb;AAGE,MAAA,IAAI,EAAE,CAHR;AAIE,MAAA,MAAM,EAAE,GAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADG,GAUD,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAC,WAApB;AAAgC,MAAA,SAAS,EAAC,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AACE,MAAA,IAAI,EAAEvE,cADR;AAEE,MAAA,SAAS,EAAEuE,IAFb;AAGE,MAAA,IAAI,EAAE,CAHR;AAIE,MAAA,MAAM,EAAE,GAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAfN,CAFF,CALF,EAiCE,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAED,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8BG,MAAM,CAACE,MAArC,CAjCF,EAkCE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAEL,IAAtB;AAA4B,MAAA,KAAK,EAAC,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,OAAO,EAAE,MAAM;AACbvB,QAAAA,WAAW,CAAC0B,MAAD,CAAX;AACAxB,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,WADF,CAlCF,CADF,CANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GA0DG,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE;AAAElC,MAAAA,KAAK,EAAE;AAAT,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAFF,EAGE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uFAHF,CADF,CAxEN,EAmFG6D,OAAO,CAACtC,YAAY,CAAC4B,MAAd,CAAP,IACC,oBAAC,UAAD;AACE,IAAA,UAAU,EAAE3B,UADd;AAEE,IAAA,UAAU,EAAED,YAAY,CAAC4B,MAF3B;AAGE,IAAA,YAAY,EAAE5B,YAHhB;AAIE,IAAA,YAAY,EAAE,CAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApFJ,EA2FGQ,QAAQ,IACP,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAEE,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,SAAS,KAAK,MAAd,GACC,oBAAC,YAAD;AACE,IAAA,OAAO,MADT;AAEE,IAAA,OAAO,EAAE,aAFX;AAGE,IAAA,KAAK,EAAEO,QAHT;AAIE,IAAA,OAAO,EAAEK,OAJX;AAKE,IAAA,IAAI,EAAG,oCAAmChB,QAAQ,CAACe,IAAK,UAASxB,KAAK,CAACwB,IAAK,GAL9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAQGX,SAAS,KAAK,SAAd,GACF,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAEI,IAApB;AAA0B,IAAA,QAAQ,EAAEQ,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADE,GAGE,oBAAC,YAAD;AACE,IAAA,OAAO,EACLR,IAAI,KAAK,8BAAT,GACI,aADJ,GAEI,cAJR;AAME,IAAA,KAAK,EAAES,OANT;AAOE,IAAA,OAAO,EAAED,OAPX;AAQE,IAAA,IAAI,EAAER,IARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZR,CA5FJ,CAPJ;AA8HD","sourcesContent":["import React, { useState } from \"react\";\nimport { Tooltip, Dialog } from \"@material-ui/core\";\nimport {\n  GroupOutlined,\n  Add,\n  FileCopyOutlined as Icon,\n  Remove,\n  Error\n} from \"@material-ui/icons/\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styled from \"styled-components\";\nimport { TableRow, TableCell } from \"@material-ui/core\";\nimport { mdiContentCopy } from \"@mdi/js\";\nimport {\n  ActiveCell,\n  AsyncTable,\n  SuccessModal,\n  LoadingModal,\n  AddCampaignModal,\n  Pagination,\n  TableLoader\n} from \"common-components\";\n\n\nconst LightTooltip = withStyles(theme => ({\n  tooltip: {\n    backgroundColor: theme.palette.common.white,\n    color: \"rgba(0, 0, 0, 0.87)\",\n    boxShadow: theme.shadows[1],\n    fontSize: 11\n  }\n}))(Tooltip);\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 145px;\n  padding: 5px 20px;\n  border-radius: 3px;\n  background-color: #fafafa;\n  margin: 10px 0;\n`;\n\nconst P = styled.p`\n  font-size: 16px;\n  color: #777777;\n`;\n\nconst AddCamp = styled.button`\n  cursor: pointer;\n  border: none;\n  outline: none;\n  color: #1194f6;\n  font-size: 16px;\n  background: inherit;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst RemoveBtn = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  cursor: pointer;\n  text-decoration: underline;\n  color: #444851;\n`;\n\nconst IdCont = styled.span`\n  width: 278px;\n  padding: 12px 0px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`;\nconst RealmName = styled.p`\n  width: fit-content;\n  text-decoration: underline;\n  color: #444851;\n`;\n\nconst NoDiv = styled.div`\n  min-height: 400px;\n`;\n\nconst GridDiv = styled.div`\n  display: grid;\n  justify-items: center;\n  margin-top: 150px;\n`;\n\nconst NoCamp = styled.p`\n  font-size: 18px;\n  text-align: center;\n  color: #7c8a97;\n`;\n\nconst NoCampSub = styled.p`\n  font-size: 16px;\n  text-align: center;\n  color: #777777;\n  max-width: 355px;\n`;\n\nexport default function CampaignSettings(props) {\n  const {\n    data,\n    removeCampaign,\n    realm,\n    paginateList,\n    paginateFn,\n    addCampaign,\n    campaignsOrig\n  } = props;\n  const [loading, setLoading] = useState(false);\n  const [copy, setCopy] = useState(false);\n  const [selected, setSelected] = useState(null);\n  const [openDelete, setOpenDelete] = useState(false);\n  const [modalType, setModalType] = useState(\"warn\");\n  const [openAdd, setOpenAdd] = useState(false);\n  const [text, setText] = useState(\"\");\n\n  const openFunc = () => {\n    setOpenAdd(!openAdd);\n  };\n\n  const removeFn = () => {\n    setModalType(\"loading\");\n    setText(\"One moment. We're removing the campaign...\");\n    setTimeout(async () => {\n      const data = await removeCampaign(selected.uuid);\n      if (data.status === 200) {\n        setModalType(\"success\");\n        setText(`You have removed \"${selected.name}\" from ${realm.name}`);\n      }\n    }, 2000);\n  };\n\n  const closeFn = () => {\n    setOpenDelete(false);\n    setTimeout(() => {\n      setModalType(\"warn\");\n    }, 800);\n  };\n\n  const addCamp = () => {\n    setOpenDelete(false);\n    setOpenAdd(true);\n    setTimeout(() => {\n      setModalType(\"warn\");\n    }, 800);\n  };\n\n  const campFn = async camps => {\n    setSelected(true);\n    setModalType(\"loading\");\n    setText(\"One moment. We're adding the campaigns...\");\n    setTimeout(() => {\n      setOpenAdd(false);\n      setOpenDelete(true);\n    }, 500);\n    const data = await addCampaign(camps);\n    if (data.status) {\n      setText(\"Successfully added campaigns\");\n      setModalType(\"success\");\n    }\n  };\n\n  return loading ? (\n    <TableLoader\n      headerText=\"Management\"\n      message=\"Loading campaigns...\"\n      Icon={GroupOutlined}\n    />\n  ) : (\n      <>\n        <Grid>\n          <P>You can associate a campaign to this realm right from this page.</P>\n          <AddCamp onClick={openFunc}>\n            <Add />\n            Add Campaign\n        </AddCamp>\n          <AddCampaignModal\n            open={openAdd}\n            openFunc={openFunc}\n            data={campaignsOrig}\n            addCampaign={campFn}\n          />\n        </Grid>\n        {data.length > 0 ? (\n          <AsyncTable\n            customHeight={480}\n            withBorder\n            headers={[\"Name\", \"Slug\", \"UUID\", \"Status\", \"\"]}\n            tableData={data}\n            render={(samples, { userCell, row, cell, uuid, icon }) =>\n              samples.map(sample => (\n                <TableRow className={row} key={sample.uuid}>\n                  <TableCell className={userCell}>\n                    <RealmName>{sample.name}</RealmName>\n                  </TableCell>\n                  <TableCell className={userCell}>{sample.slug}</TableCell>\n                  <TableCell className={uuid} text={sample.uuid}>\n                    <IdCont>{sample.uuid}</IdCont>\n                    <CopyToClipboard\n                      text={sample.uuid}\n                      onCopy={() => setCopy(true)}\n                      onPointerLeave={() => setCopy(false)}\n                    >\n                      {copy ? (\n                        <LightTooltip title=\"UUID Copied!\" placement=\"top\">\n                          <Icon\n                            path={mdiContentCopy}\n                            className={icon}\n                            size={1}\n                            rotate={360}\n                          />\n                        </LightTooltip>\n                      ) : (\n                          <LightTooltip title=\"Copy UUID\" placement=\"top\">\n                            <Icon\n                              path={mdiContentCopy}\n                              className={icon}\n                              size={1}\n                              rotate={360}\n                            />\n                          </LightTooltip>\n                        )}\n                    </CopyToClipboard>\n                  </TableCell>\n                  <ActiveCell className={cell}>{sample.active}</ActiveCell>\n                  <TableCell className={cell} align=\"right\">\n                    <RemoveBtn\n                      onClick={() => {\n                        setSelected(sample);\n                        setOpenDelete(true);\n                      }}\n                    >\n                      <Remove />\n                      Remove\n                  </RemoveBtn>\n                  </TableCell>\n                </TableRow>\n              ))\n            }\n          />\n        ) : (\n            <NoDiv>\n              <GridDiv>\n                <Error style={{ color: \"red\" }} />\n                <NoCamp>There are no campaigns associated with this realm.</NoCamp>\n                <NoCampSub>\n                  Would you like to add a campaign? Just hit the “Add Campaign”\n                  button.\n            </NoCampSub>\n              </GridDiv>\n            </NoDiv>\n          )}\n        {Boolean(paginateList.length) && (\n          <Pagination\n            paginateFn={paginateFn}\n            totalItems={paginateList.length}\n            paginateList={paginateList}\n            itemsPerPage={5}\n          />\n        )}\n        {selected && (\n          <Dialog open={openDelete}>\n            {modalType === \"warn\" ? (\n              <SuccessModal\n                warning\n                btnText={\"YES, REMOVE\"}\n                btnFn={removeFn}\n                closeFn={closeFn}\n                text={`Are you sure you want to remove \"${selected.name}\" from ${realm.name}?`}\n              />\n            ) : modalType === \"loading\" ? (\n              <LoadingModal text={text} cancelFn={closeFn} />\n            ) : (\n                  <SuccessModal\n                    btnText={\n                      text === \"Successfully added campaigns\"\n                        ? \"ADD ANOTHER\"\n                        : \"ADD CAMPAIGN\"\n                    }\n                    btnFn={addCamp}\n                    closeFn={closeFn}\n                    text={text}\n                  />\n                )}\n          </Dialog>\n        )}\n      </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}