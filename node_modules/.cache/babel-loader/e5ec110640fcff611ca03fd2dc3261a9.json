{"ast":null,"code":"import _slicedToArray from \"/home/webdev/Documents/react-portal/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/webdev/Documents/react-portal/src/components/manage/manage-companies/components/table/index.tsx\";\nimport React, { useState } from \"react\";\nimport { AsyncTable, ActiveCell, EditButton } from \"common-components\";\nimport { TableRow, TableCell, CircularProgress, Tooltip, withStyles } from \"@material-ui/core\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { FileCopyOutlined as Icon } from \"@material-ui/icons\";\nimport { mdiContentCopy } from \"@mdi/js\";\nconst LightTooltip = withStyles(theme => ({\n  tooltip: {\n    backgroundColor: theme.palette.common.white,\n    color: \"rgba(0, 0, 0, 0.87)\",\n    boxShadow: theme.shadows[1],\n    fontSize: 11\n  }\n}))(Tooltip);\n\nconst TableComponent = ({\n  userData,\n  headers,\n  innerLoading\n}) => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        copy = _useState2[0],\n        setCopy = _useState2[1];\n\n  const renderIcon = icon => {\n    const iconProps = {\n      className: icon,\n      path: mdiContentCopy,\n      size: 1,\n      rotate: 360\n    };\n    return React.createElement(Icon, Object.assign({}, iconProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }));\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, innerLoading === true ? React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"200px 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(CircularProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }))) : null, userData.length !== 0 ? React.createElement(AsyncTable, {\n    headers: headers,\n    tableData: userData,\n    render: (companies, {\n      row,\n      cell,\n      uuid,\n      icon\n    }) => {\n      return companies.map(company => React.createElement(TableRow, {\n        className: row,\n        key: company.uuid,\n        id: \"demo-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        className: cell,\n        style: {\n          maxWidth: 250\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: {\n          pathname: `/manage/companies/edit/${company.slug}/${company.uuid}`,\n          state: {\n            company: company\n          }\n        },\n        style: {\n          color: \"#777777\"\n        },\n        onClick: () => {\n          localStorage.setItem(`companyslug`, company.slug);\n          localStorage.setItem(`companyuuid`, company.uuid);\n          localStorage.setItem(`companyData`, JSON.stringify(company));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, company.name)), React.createElement(TableCell, {\n        className: cell,\n        style: {\n          color: \"#777777\",\n          maxWidth: 250\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, company.slug), React.createElement(TableCell, {\n        className: cell,\n        style: {\n          color: \"#777777\",\n          height: \"100%\",\n          maxWidth: 200\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, company.email !== null ? company.email.length !== 0 ? company.email : \"Field Not Set\" : \"Field Not Set\"), React.createElement(TableCell, {\n        className: cell,\n        style: {\n          color: \"#777777\",\n          height: \"100%\",\n          maxWidth: 200\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, company.website !== null ? company.website.length !== 0 ? company.website : \"Field Not Set\" : \"Field Not Set\"), React.createElement(TableCell, {\n        className: uuid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, company.uuid), React.createElement(CopyToClipboard, {\n        text: company.uuid,\n        onCopy: () => setCopy(true),\n        onPointerLeave: () => setCopy(false),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, copy ? React.createElement(LightTooltip, {\n        title: \"UUID Copied!\",\n        placement: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, renderIcon(icon)) : React.createElement(LightTooltip, {\n        title: \"Copy UUID\",\n        placement: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, renderIcon(icon)))), React.createElement(ActiveCell, {\n        className: cell,\n        style: {\n          color: \"#777777\",\n          maxWidth: 150\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, company.active), React.createElement(TableCell, {\n        className: cell,\n        style: {\n          maxWidth: 150\n        },\n        align: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: {\n          pathname: `/manage/companies/edit/${company.slug}/${company.uuid}`,\n          state: {\n            company: company\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(EditButton, {\n        text: \"Edit\",\n        onClickFunc: () => {\n          localStorage.setItem(`companyslug`, company.slug);\n          localStorage.setItem(`companyuuid`, company.uuid);\n          localStorage.setItem(`companyData`, JSON.stringify(company));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      })))));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"200px 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    style: {\n      color: \"#7c8a97\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, \"No results...\"), React.createElement(\"h4\", {\n    style: {\n      color: \"#7c8a97\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, \"Try filtering other fields\"))));\n};\n\nconst CompanyTable = withRouter(TableComponent);\nexport { CompanyTable };","map":{"version":3,"sources":["/home/webdev/Documents/react-portal/src/components/manage/manage-companies/components/table/index.tsx"],"names":["React","useState","AsyncTable","ActiveCell","EditButton","TableRow","TableCell","CircularProgress","Tooltip","withStyles","CopyToClipboard","Link","withRouter","FileCopyOutlined","Icon","mdiContentCopy","LightTooltip","theme","tooltip","backgroundColor","palette","common","white","color","boxShadow","shadows","fontSize","TableComponent","userData","headers","innerLoading","copy","setCopy","renderIcon","icon","iconProps","className","path","size","rotate","height","textAlign","padding","length","companies","row","cell","uuid","map","company","maxWidth","pathname","slug","state","localStorage","setItem","JSON","stringify","name","email","website","active","CompanyTable"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,UAAjC,QAAmD,mBAAnD;AACA,SACEC,QADF,EAEEC,SAFF,EAGEC,gBAHF,EAIEC,OAJF,EAKEC,UALF,QAMO,mBANP;AAQA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,IAAT,EAAeC,UAAf,QAAsD,kBAAtD;AACA,SAASC,gBAAgB,IAAIC,IAA7B,QAAyC,oBAAzC;AACA,SAASC,cAAT,QAA+B,SAA/B;AAEA,MAAMC,YAAY,GAAGP,UAAU,CAACQ,KAAK,KAAK;AACxCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,eAAe,EAAEF,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBC,KAD/B;AAEPC,IAAAA,KAAK,EAAE,qBAFA;AAGPC,IAAAA,SAAS,EAAEP,KAAK,CAACQ,OAAN,CAAc,CAAd,CAHJ;AAIPC,IAAAA,QAAQ,EAAE;AAJH;AAD+B,CAAL,CAAN,CAAV,CAOjBlB,OAPiB,CAArB;;AAeA,MAAMmB,cAA+B,GAAG,CAAC;AACvCC,EAAAA,QADuC;AAEvCC,EAAAA,OAFuC;AAGvCC,EAAAA;AAHuC,CAAD,KAIlC;AAAA,oBACoB7B,QAAQ,CAAC,KAAD,CAD5B;AAAA;AAAA,QACG8B,IADH;AAAA,QACSC,OADT;;AAEJ,QAAMC,UAAU,GAAIC,IAAD,IAAe;AAChC,UAAMC,SAAS,GAAG;AAChBC,MAAAA,SAAS,EAAEF,IADK;AAEhBG,MAAAA,IAAI,EAAEtB,cAFU;AAGhBuB,MAAAA,IAAI,EAAE,CAHU;AAIhBC,MAAAA,MAAM,EAAE;AAJQ,KAAlB;AAMA,WAAO,oBAAC,IAAD,oBAAUJ,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GARD;;AASA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,YAAY,KAAK,IAAjB,GACC;AAAK,IAAA,KAAK,EAAE;AAAEU,MAAAA,MAAM,EAAE;AAAV,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE,QAAb;AAAuBC,MAAAA,OAAO,EAAE;AAAhC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADD,GAMG,IAPN,EAQGd,QAAQ,CAACe,MAAT,KAAoB,CAApB,GACC,oBAAC,UAAD;AACE,IAAA,OAAO,EAAEd,OADX;AAEE,IAAA,SAAS,EAAED,QAFb;AAGE,IAAA,MAAM,EAAE,CAACgB,SAAD,EAAiB;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,IAAP;AAAaC,MAAAA,IAAb;AAAmBb,MAAAA;AAAnB,KAAjB,KAAoD;AAC1D,aAAOU,SAAS,CAACI,GAAV,CAAeC,OAAD,IACnB,oBAAC,QAAD;AAAU,QAAA,SAAS,EAAEJ,GAArB;AAA0B,QAAA,GAAG,EAAEI,OAAO,CAACF,IAAvC;AAA6C,QAAA,EAAE,EAAC,WAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAED,IAAtB;AAA4B,QAAA,KAAK,EAAE;AAAEI,UAAAA,QAAQ,EAAE;AAAZ,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AACE,QAAA,EAAE,EAAE;AACFC,UAAAA,QAAQ,EAAG,0BAAyBF,OAAO,CAACG,IAAK,IAAGH,OAAO,CAACF,IAAK,EAD/D;AAEFM,UAAAA,KAAK,EAAE;AACLJ,YAAAA,OAAO,EAAEA;AADJ;AAFL,SADN;AAOE,QAAA,KAAK,EAAE;AAAE1B,UAAAA,KAAK,EAAE;AAAT,SAPT;AAQE,QAAA,OAAO,EAAE,MAAM;AACb+B,UAAAA,YAAY,CAACC,OAAb,CAAsB,aAAtB,EAAoCN,OAAO,CAACG,IAA5C;AACAE,UAAAA,YAAY,CAACC,OAAb,CAAsB,aAAtB,EAAoCN,OAAO,CAACF,IAA5C;AACAO,UAAAA,YAAY,CAACC,OAAb,CACG,aADH,EAEEC,IAAI,CAACC,SAAL,CAAeR,OAAf,CAFF;AAID,SAfH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAiBGA,OAAO,CAACS,IAjBX,CADF,CADF,EAsBE,oBAAC,SAAD;AACE,QAAA,SAAS,EAAEZ,IADb;AAEE,QAAA,KAAK,EAAE;AAAEvB,UAAAA,KAAK,EAAE,SAAT;AAAoB2B,UAAAA,QAAQ,EAAE;AAA9B,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIGD,OAAO,CAACG,IAJX,CAtBF,EA4BE,oBAAC,SAAD;AACE,QAAA,SAAS,EAAEN,IADb;AAEE,QAAA,KAAK,EAAE;AACLvB,UAAAA,KAAK,EAAE,SADF;AAELiB,UAAAA,MAAM,EAAE,MAFH;AAGLU,UAAAA,QAAQ,EAAE;AAHL,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQGD,OAAO,CAACU,KAAR,KAAkB,IAAlB,GACGV,OAAO,CAACU,KAAR,CAAchB,MAAd,KAAyB,CAAzB,GACEM,OAAO,CAACU,KADV,GAEE,eAHL,GAIG,eAZN,CA5BF,EA0CE,oBAAC,SAAD;AACE,QAAA,SAAS,EAAEb,IADb;AAEE,QAAA,KAAK,EAAE;AACLvB,UAAAA,KAAK,EAAE,SADF;AAELiB,UAAAA,MAAM,EAAE,MAFH;AAGLU,UAAAA,QAAQ,EAAE;AAHL,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQGD,OAAO,CAACW,OAAR,KAAoB,IAApB,GACGX,OAAO,CAACW,OAAR,CAAgBjB,MAAhB,KAA2B,CAA3B,GACEM,OAAO,CAACW,OADV,GAEE,eAHL,GAIG,eAZN,CA1CF,EAwDE,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAEb,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIE,OAAO,CAACF,IAAZ,CADF,EAEE,oBAAC,eAAD;AACE,QAAA,IAAI,EAAEE,OAAO,CAACF,IADhB;AAEE,QAAA,MAAM,EAAE,MAAMf,OAAO,CAAC,IAAD,CAFvB;AAGE,QAAA,cAAc,EAAE,MAAMA,OAAO,CAAC,KAAD,CAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKGD,IAAI,GACH,oBAAC,YAAD;AAAc,QAAA,KAAK,EAAC,cAApB;AAAmC,QAAA,SAAS,EAAC,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGE,UAAU,CAACC,IAAD,CADb,CADG,GAKH,oBAAC,YAAD;AAAc,QAAA,KAAK,EAAC,WAApB;AAAgC,QAAA,SAAS,EAAC,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,UAAU,CAACC,IAAD,CADb,CAVJ,CAFF,CAxDF,EA2EE,oBAAC,UAAD;AACE,QAAA,SAAS,EAAEY,IADb;AAEE,QAAA,KAAK,EAAE;AAAEvB,UAAAA,KAAK,EAAE,SAAT;AAAoB2B,UAAAA,QAAQ,EAAE;AAA9B,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIGD,OAAO,CAACY,MAJX,CA3EF,EAiFE,oBAAC,SAAD;AACE,QAAA,SAAS,EAAEf,IADb;AAEE,QAAA,KAAK,EAAE;AACLI,UAAAA,QAAQ,EAAE;AADL,SAFT;AAKE,QAAA,KAAK,EAAC,OALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOE,oBAAC,IAAD;AACE,QAAA,EAAE,EAAE;AACFC,UAAAA,QAAQ,EAAG,0BAAyBF,OAAO,CAACG,IAAK,IAAGH,OAAO,CAACF,IAAK,EAD/D;AAEFM,UAAAA,KAAK,EAAE;AACLJ,YAAAA,OAAO,EAAEA;AADJ;AAFL,SADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,WAAW,EAAE,MAAM;AACjBK,UAAAA,YAAY,CAACC,OAAb,CAAsB,aAAtB,EAAoCN,OAAO,CAACG,IAA5C;AACAE,UAAAA,YAAY,CAACC,OAAb,CAAsB,aAAtB,EAAoCN,OAAO,CAACF,IAA5C;AACAO,UAAAA,YAAY,CAACC,OAAb,CACG,aADH,EAEEC,IAAI,CAACC,SAAL,CAAeR,OAAf,CAFF;AAID,SATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARF,CAPF,CAjFF,CADK,CAAP;AAgHD,KApHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAwHC;AAAK,IAAA,KAAK,EAAE;AAAET,MAAAA,MAAM,EAAE;AAAV,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE,QAAb;AAAuBC,MAAAA,OAAO,EAAE;AAAhC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,KAAK,EAAE;AACLnB,MAAAA,KAAK,EAAE;AADF,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAQE;AACE,IAAA,KAAK,EAAE;AACLA,MAAAA,KAAK,EAAE;AADF,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCARF,CADF,CAhIJ,CADF;AAsJD,CArKD;;AAuKA,MAAMuC,YAAY,GAAGlD,UAAU,CAACe,cAAD,CAA/B;AAEA,SAASmC,YAAT","sourcesContent":["import React, { useState } from \"react\";\n\nimport { AsyncTable, ActiveCell, EditButton } from \"common-components\";\nimport {\n  TableRow,\n  TableCell,\n  CircularProgress,\n  Tooltip,\n  withStyles\n} from \"@material-ui/core\";\n\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { Link, withRouter, RouteComponentProps } from \"react-router-dom\";\nimport { FileCopyOutlined as Icon } from \"@material-ui/icons\";\nimport { mdiContentCopy } from \"@mdi/js\";\n\nconst LightTooltip = withStyles(theme => ({\n  tooltip: {\n    backgroundColor: theme.palette.common.white,\n    color: \"rgba(0, 0, 0, 0.87)\",\n    boxShadow: theme.shadows[1],\n    fontSize: 11\n  }\n}))(Tooltip);\n\ninterface Props extends RouteComponentProps<any> {\n  userData: any;\n  innerLoading: boolean;\n  headers: string[];\n}\n\nconst TableComponent: React.FC<Props> = ({\n  userData,\n  headers,\n  innerLoading\n}) => {\n  const [copy, setCopy] = useState(false);\n  const renderIcon = (icon: any) => {\n    const iconProps = {\n      className: icon,\n      path: mdiContentCopy,\n      size: 1,\n      rotate: 360\n    };\n    return <Icon {...iconProps} />;\n  };\n  return (\n    <React.Fragment>\n      {innerLoading === true ? (\n        <div style={{ height: \"100%\" }}>\n          <div style={{ textAlign: \"center\", padding: \"200px 0\" }}>\n            <CircularProgress />\n          </div>\n        </div>\n      ) : null}\n      {userData.length !== 0 ? (\n        <AsyncTable\n          headers={headers}\n          tableData={userData}\n          render={(companies: any, { row, cell, uuid, icon }: any) => {\n            return companies.map((company: any) => (\n              <TableRow className={row} key={company.uuid} id=\"demo-body\">\n                <TableCell className={cell} style={{ maxWidth: 250 }}>\n                  <Link\n                    to={{\n                      pathname: `/manage/companies/edit/${company.slug}/${company.uuid}`,\n                      state: {\n                        company: company\n                      }\n                    }}\n                    style={{ color: \"#777777\" }}\n                    onClick={() => {\n                      localStorage.setItem(`companyslug`, company.slug);\n                      localStorage.setItem(`companyuuid`, company.uuid);\n                      localStorage.setItem(\n                        `companyData`,\n                        JSON.stringify(company)\n                      );\n                    }}\n                  >\n                    {company.name}\n                  </Link>\n                </TableCell>\n                <TableCell\n                  className={cell}\n                  style={{ color: \"#777777\", maxWidth: 250 }}\n                >\n                  {company.slug}\n                </TableCell>\n                <TableCell\n                  className={cell}\n                  style={{\n                    color: \"#777777\",\n                    height: \"100%\",\n                    maxWidth: 200\n                  }}\n                >\n                  {company.email !== null\n                    ? company.email.length !== 0\n                      ? company.email\n                      : \"Field Not Set\"\n                    : \"Field Not Set\"}\n                </TableCell>\n                <TableCell\n                  className={cell}\n                  style={{\n                    color: \"#777777\",\n                    height: \"100%\",\n                    maxWidth: 200\n                  }}\n                >\n                  {company.website !== null\n                    ? company.website.length !== 0\n                      ? company.website\n                      : \"Field Not Set\"\n                    : \"Field Not Set\"}\n                </TableCell>\n                <TableCell className={uuid}>\n                  <p>{company.uuid}</p>\n                  <CopyToClipboard\n                    text={company.uuid}\n                    onCopy={() => setCopy(true)}\n                    onPointerLeave={() => setCopy(false)}\n                  >\n                    {copy ? (\n                      <LightTooltip title=\"UUID Copied!\" placement=\"top\">\n                        {renderIcon(icon)}\n                      </LightTooltip>\n                    ) : (\n                      <LightTooltip title=\"Copy UUID\" placement=\"top\">\n                        {renderIcon(icon)}\n                      </LightTooltip>\n                    )}\n                  </CopyToClipboard>\n                </TableCell>\n\n                <ActiveCell\n                  className={cell}\n                  style={{ color: \"#777777\", maxWidth: 150 }}\n                >\n                  {company.active}\n                </ActiveCell>\n                <TableCell\n                  className={cell}\n                  style={{\n                    maxWidth: 150\n                  }}\n                  align=\"right\"\n                >\n                  <Link\n                    to={{\n                      pathname: `/manage/companies/edit/${company.slug}/${company.uuid}`,\n                      state: {\n                        company: company\n                      }\n                    }}\n                  >\n                    <EditButton\n                      text=\"Edit\"\n                      onClickFunc={() => {\n                        localStorage.setItem(`companyslug`, company.slug);\n                        localStorage.setItem(`companyuuid`, company.uuid);\n                        localStorage.setItem(\n                          `companyData`,\n                          JSON.stringify(company)\n                        );\n                      }}\n                    />\n                  </Link>\n                </TableCell>\n              </TableRow>\n            ));\n          }}\n        />\n      ) : (\n        <div style={{ height: \"100%\" }}>\n          <div style={{ textAlign: \"center\", padding: \"200px 0\" }}>\n            <h1\n              style={{\n                color: \"#7c8a97\"\n              }}\n            >\n              No results...\n            </h1>\n            <h4\n              style={{\n                color: \"#7c8a97\"\n              }}\n            >\n              Try filtering other fields\n            </h4>\n          </div>\n        </div>\n      )}\n    </React.Fragment>\n  );\n};\n\nconst CompanyTable = withRouter(TableComponent);\n\nexport { CompanyTable };\n"]},"metadata":{},"sourceType":"module"}