{"ast":null,"code":"import _objectSpread from \"/home/webdev/Documents/react-portal/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/webdev/Documents/react-portal/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/webdev/Documents/react-portal/src/common-components/dnd-card/index.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { CustomCard, CardHeader, CardBody, CardNoResult } from \"common-components\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport DragIcon from \"@material-ui/icons/DragHandle\";\nimport RemoveIcon from \"@material-ui/icons/RemoveCircle\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { Grid, Typography, Table, TableBody, Collapse, CardContent, Button, Menu, MenuItem } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nconst style = {\n  table: {\n    backgroundColor: \"#FFF\"\n  },\n  row: {\n    height: 50,\n    \"&:nth-of-type(even)\": {\n      backgroundColor: \"#f8f9fa\"\n    },\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: \"#FFF\"\n    }\n  },\n  cell: {\n    borderBottom: \"none\"\n  }\n};\n\nconst DNDCardsComp = ({\n  card1Data,\n  card2Data,\n  card3Data,\n  setActiveData,\n  saveActiveSegment,\n  classes,\n  addButton1,\n  addButton2,\n  addButton3,\n  addFunction1,\n  addFunction2,\n  addFunction3,\n  card1Popover,\n  card2Popover,\n  card3Popover,\n  card1Title,\n  card2Title,\n  card3Title\n}) => {\n  const _useState = useState(card1Data),\n        _useState2 = _slicedToArray(_useState, 2),\n        card1DataOrig = _useState2[0],\n        Setcard1DataOrig = _useState2[1];\n\n  const _useState3 = useState(card2Data),\n        _useState4 = _slicedToArray(_useState3, 2),\n        card2DataOrig = _useState4[0],\n        Setcard2DataOrig = _useState4[1];\n\n  const _useState5 = useState(card3Data),\n        _useState6 = _slicedToArray(_useState5, 2),\n        card3DataOrig = _useState6[0],\n        Setcard3DataOrig = _useState6[1];\n\n  const _useState7 = useState(card1Data),\n        _useState8 = _slicedToArray(_useState7, 2),\n        card1PrevData = _useState8[0],\n        Setcard1PrevData = _useState8[1];\n\n  const _useState9 = useState(card2Data),\n        _useState10 = _slicedToArray(_useState9, 2),\n        card2PrevData = _useState10[0],\n        Setcard2PrevData = _useState10[1];\n\n  const _useState11 = useState(card3Data),\n        _useState12 = _slicedToArray(_useState11, 2),\n        card3PrevData = _useState12[0],\n        Setcard3PrevData = _useState12[1];\n\n  const _useState13 = useState({\n    card1DataState: card1Data,\n    card2DataState: card2Data,\n    card3DataState: card3Data\n  }),\n        _useState14 = _slicedToArray(_useState13, 2),\n        cardDataState = _useState14[0],\n        SetcardData = _useState14[1];\n\n  const _useState15 = useState(false),\n        _useState16 = _slicedToArray(_useState15, 2),\n        saveSetting = _useState16[0],\n        SetsaveSetting = _useState16[1];\n\n  const _useState17 = useState(null),\n        _useState18 = _slicedToArray(_useState17, 2),\n        anchorEl = _useState18[0],\n        SetanchorEl = _useState18[1];\n\n  const _useState19 = useState(false),\n        _useState20 = _slicedToArray(_useState19, 2),\n        open = _useState20[0],\n        Setopen = _useState20[1];\n\n  const _useState21 = useState(null),\n        _useState22 = _slicedToArray(_useState21, 2),\n        anchorElCard1 = _useState22[0],\n        SetanchorElCard1 = _useState22[1];\n\n  const _useState23 = useState(false),\n        _useState24 = _slicedToArray(_useState23, 2),\n        openCard1 = _useState24[0],\n        SetopenCard1 = _useState24[1];\n\n  const _useState25 = useState([]),\n        _useState26 = _slicedToArray(_useState25, 2),\n        activeData = _useState26[0],\n        SetactiveData = _useState26[1];\n\n  useEffect(() => {\n    Setcard1DataOrig(card1Data);\n  });\n\n  const getFirst = n => {\n    var x = n.firstChild; // while (x.nodeType != 1) {\n    //   x = x.nextSibling;\n    // }\n\n    return x.parentNode.nodeName;\n  };\n\n  const getRootNode = data => {\n    const parser = new DOMParser();\n    const theDom = parser.parseFromString(data, \"application/xml\");\n    const rootNode = getFirst(theDom.documentElement);\n    return rootNode;\n  };\n\n  const id2List = {\n    droppable: \"card1DataState\",\n    droppable2: \"card2DataState\",\n    droppable3: \"card3DataState\"\n  };\n\n  const getList = id => cardDataState[id2List[id]];\n\n  const move = (source, destination, droppableSource, droppableDestination) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n\n    const _sourceClone$splice = sourceClone.splice(droppableSource.index, 1),\n          _sourceClone$splice2 = _slicedToArray(_sourceClone$splice, 1),\n          removed = _sourceClone$splice2[0];\n\n    destClone.splice(droppableDestination.index, 0, removed);\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n    return result;\n  };\n\n  const getItemStyle = (isDragging, draggableStyle) => _objectSpread({}, draggableStyle);\n\n  const onDragEnd = result => {\n    const source = result.source,\n          destination = result.destination; // dropped outside the list\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId !== \"droppable\") {\n      return;\n    }\n\n    const results = move(getList(source.droppableId), getList(destination.droppableId), source, destination);\n\n    if (destination.droppableId === \"droppable\" && source.droppableId === \"droppable2\") {\n      SetcardData(_objectSpread({}, cardDataState, {\n        card1DataState: results.droppable,\n        card2DataState: results.droppable2\n      }));\n      SetsaveSetting(true); // this.setState({\n      //   card1Data: results.droppable,\n      //   card2Data: results.droppable2,\n      //   saveSetting: true\n      // });\n    } else if (destination.droppableId === \"droppable\" && source.droppableId === \"droppable3\") {\n      SetcardData(_objectSpread({}, cardDataState, {\n        card1DataState: results.droppable,\n        card3DataState: results.droppable3\n      }));\n      SetsaveSetting(true); // this.setState({\n      //   card1Data: results.droppable,\n      //   card3Data: results.droppable3,\n      //   saveSetting: true\n      // });\n    } else {\n      return;\n    }\n  };\n\n  const Cancel = () => {\n    SetcardData(_objectSpread({}, cardDataState, {\n      card1DataState: card1PrevData,\n      card2DataState: card2PrevData,\n      card3DataState: card3PrevData\n    }));\n    SetsaveSetting(false); // this.setState({\n    //   card1Data: this.state.card1PrevData,\n    //   card2Data: this.state.card2PrevData,\n    //   card3Data: this.state.card3PrevData,\n    //   saveSetting: false\n    // });\n  };\n\n  const handleClickOpen = (event, data) => {\n    SetanchorEl(event.currentTarget);\n    Setopen(!open); // this.setState({\n    //   anchorEl : event.currentTarget,\n    //   open: !this.state.open\n    // });\n\n    setActiveData(data);\n  };\n\n  const handClose = () => {\n    Setopen(false); // this.setState({\n    //   open: false\n    // });\n    // setActiveData(data);\n  };\n\n  const handleClickOpenCard1 = (event, data) => {\n    SetanchorElCard1(event.currentTarge);\n    SetopenCard1(!open);\n    SetactiveData(data); // this.setState({\n    //   anchorElCard1: event.currentTarget,\n    //   openCard1: !this.state.open,\n    //   activeData: data\n    // });\n\n    setActiveData(data);\n  };\n\n  const handCloseCard1 = () => {\n    SetopenCard1(false); // this.setState({\n    //   openCard1: false\n    // });\n    // setActiveData(data);\n  };\n\n  const saveActiveSegments = () => {\n    if (saveActiveSegment !== undefined) {\n      saveActiveSegment(cardDataState.card1DataState);\n      Setcard1PrevData(cardDataState.card1DataState);\n      Setcard2PrevData(cardDataState.card2DataState);\n      Setcard3PrevData(cardDataState.card3DataState);\n      SetsaveSetting(false); // this.setState({\n      //   card1PrevData: this.state.card1Data,\n      //   card2PrevData: this.state.card2Data,\n      //   card3PrevData: this.state.card3Data,\n      //   saveSetting: false\n      // });\n    }\n  };\n\n  const DeactivateSegment = () => {\n    var card1DataArr = [...cardDataState.card1DataState];\n    var card2DataArr = [...cardDataState.card2DataState];\n    var card3DataArr = [...cardDataState.card3DataState];\n\n    if (card2DataOrig.includes(activeData)) {\n      card2DataArr.push(activeData);\n    } else if (card3DataOrig.includes(activeData)) {\n      card3DataArr.push(activeData);\n    }\n\n    var index = card1DataArr.indexOf(activeData);\n\n    if (index > -1) {\n      card1DataArr.splice(index, 1);\n    }\n\n    SetcardData(_objectSpread({}, cardDataState, {\n      card1DataState: card1DataArr,\n      card2DataState: card2DataArr,\n      card3DataState: card3DataArr\n    }));\n    SetopenCard1(false);\n    SetsaveSetting(true); // this.setState({\n    //   card1Data: card1DataArr,\n    //   card2Data: card2DataArr,\n    //   card3Data: card3DataArr,\n    //   openCard1: false,\n    //   saveSetting: true\n    // });\n  }; // const { classes } = this.props;\n  //props : card1Title , addButton1,addButton2,addButton3, addFunction1,addFunction2,addFunction3, card3Popover , card2Title , card3Title\n\n\n  return React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320\n    },\n    __self: this\n  }, React.createElement(Droppable, {\n    droppableId: \"droppable\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321\n    },\n    __self: this\n  }, provided => React.createElement(React.Fragment, null, React.createElement(CustomCard, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    title: `${card1Title}`,\n    searchData: cardDataState.card1DataState,\n    searchHeaders: [\"name\"],\n    addButton: addButton1,\n    addFunction: addFunction1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325\n    },\n    __self: this\n  }), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333\n    },\n    __self: this\n  }, React.createElement(CardContent, {\n    style: {\n      backgroundColor: \"#FFF\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335\n    },\n    __self: this\n  }, \"Work in progress section\"), React.createElement(Typography, {\n    variant: \"caption\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338\n    },\n    __self: this\n  }, \"still needs the api for this section\")), React.createElement(\"div\", Object.assign({\n    ref: provided.innerRef\n  }, provided.droppableProps, {\n    style: {\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342\n    },\n    __self: this\n  }), React.createElement(Collapse, {\n    in: saveSetting,\n    timeout: 1000,\n    unmountOnExit: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347\n    },\n    __self: this\n  }, React.createElement(CardContent, {\n    style: {\n      backgroundColor: \"#FFF\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"space-around\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: saveActiveSegments,\n    style: {\n      paddingTop: 10,\n      paddingBottom: 10,\n      paddingLeft: 70,\n      paddingRight: 70,\n      fontWeight: \"bold\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351\n    },\n    __self: this\n  }, \"Save\")), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364\n    },\n    __self: this\n  }, React.createElement(Button, {\n    style: {\n      paddingTop: 10,\n      paddingBottom: 10,\n      paddingLeft: 70,\n      paddingRight: 70,\n      fontWeight: \"bold\"\n    },\n    onClick: Cancel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365\n    },\n    __self: this\n  }, \"Cancel\"))))), React.createElement(Table, {\n    className: classes.table,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382\n    },\n    __self: this\n  }, React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383\n    },\n    __self: this\n  }, cardDataState.card1DataState.length !== 0 ? cardDataState.card1DataState.map((data, index) => React.createElement(Draggable, {\n    isDragDisabled: true,\n    key: data.uuid,\n    draggableId: `${index}`,\n    index: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387\n    },\n    __self: this\n  }, provided => React.createElement(TableRow, {\n    className: classes.row // style={this.getItemStyle(\n    //   snapshot.isDragging,\n    //   provided.draggableProps.style\n    // )}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394\n    },\n    __self: this\n  }, React.createElement(TableCell, Object.assign({\n    className: classes.cell,\n    innerRef: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412\n    },\n    __self: this\n  }, data.name)), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"caption\",\n    style: {\n      color: \"#a3a3a3\",\n      textTransform: \"capitalize\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417\n    },\n    __self: this\n  }, data.type)))), React.createElement(Grid, {\n    item: true,\n    style: {\n      marginLeft: \"auto\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429\n    },\n    __self: this\n  }, React.createElement(SettingsIcon, {\n    style: {\n      fontSize: 19\n    },\n    onClick: event => handleClickOpenCard1(event, data),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433\n    },\n    __self: this\n  }), React.createElement(Menu, {\n    onClose: handCloseCard1,\n    anchorEl: anchorElCard1,\n    style: {\n      marginTop: 40\n    },\n    id: \"simple-menu\",\n    keepMounted: true,\n    open: openCard1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442\n    },\n    __self: this\n  }, card2DataOrig.includes(activeData) ? React.createElement(MenuItem, {\n    style: {\n      color: \"#777777\",\n      width: 250,\n      paddingTop: 0,\n      paddingBottom: 0\n    },\n    onClick: DeactivateSegment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453\n    },\n    __self: this\n  }, React.createElement(RemoveIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    style: {\n      marginLeft: 40\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463\n    },\n    __self: this\n  }, \"Deactivate\")) : card3Popover !== undefined ? React.createElement(React.Fragment, null, card3Popover, React.createElement(MenuItem, {\n    style: {\n      color: \"#777777\",\n      width: 250,\n      paddingTop: 0,\n      paddingBottom: 0\n    },\n    onClick: DeactivateSegment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472\n    },\n    __self: this\n  }, React.createElement(RemoveIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    style: {\n      marginLeft: 40\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482\n    },\n    __self: this\n  }, \"Deactivate\"))) : React.createElement(MenuItem, {\n    style: {\n      color: \"#777777\",\n      width: 250,\n      paddingTop: 0,\n      paddingBottom: 0\n    },\n    onClick: DeactivateSegment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490\n    },\n    __self: this\n  }, React.createElement(RemoveIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    style: {\n      marginLeft: 40\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500\n    },\n    __self: this\n  }, \"Deactivate\"))))))))) : React.createElement(CardNoResult, {\n    text: \"No Result\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 517\n    },\n    __self: this\n  })))))), provided.placeholder))), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 530\n    },\n    __self: this\n  }, React.createElement(Droppable, {\n    droppableId: \"droppable2\",\n    isDropDisabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 531\n    },\n    __self: this\n  }, provided => React.createElement(React.Fragment, null, React.createElement(CustomCard, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    title: `${card2Title}`,\n    searchData: cardDataState.card2DataState,\n    searchHeaders: [\"name\"],\n    addButton: addButton2,\n    addFunction: addFunction2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535\n    },\n    __self: this\n  }), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 542\n    },\n    __self: this\n  }, React.createElement(Table, {\n    className: classes.table,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543\n    },\n    __self: this\n  }, React.createElement(TableBody, Object.assign({\n    innerRef: provided.innerRef\n  }, provided.droppableProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544\n    },\n    __self: this\n  }), cardDataState.card2DataState.length !== 0 ? cardDataState.card2DataState.map((data, index) => React.createElement(Draggable, {\n    key: data.uuid,\n    draggableId: `${data.uuid}`,\n    index: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 551\n    },\n    __self: this\n  }, provided => React.createElement(TableRow, Object.assign({\n    className: classes.row,\n    innerRef: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557\n    },\n    __self: this\n  }), React.createElement(TableCell, {\n    className: classes.cell,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 568\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 569\n    },\n    __self: this\n  }, React.createElement(DragIcon, {\n    style: {\n      fontSize: 19\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 570\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 572\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 574\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575\n    },\n    __self: this\n  }, data.name)), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 579\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"caption\",\n    style: {\n      color: \"#a3a3a3\",\n      textTransform: \"capitalize\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 580\n    },\n    __self: this\n  }, data.type))))))))) : React.createElement(CardNoResult, {\n    text: \"No Result\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 600\n    },\n    __self: this\n  }))))), provided.placeholder))), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 612\n    },\n    __self: this\n  }, React.createElement(Droppable, {\n    droppableId: \"droppable3\",\n    isDropDisabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 613\n    },\n    __self: this\n  }, provided => React.createElement(React.Fragment, null, React.createElement(CustomCard, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 616\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    title: `${card3Title}`,\n    searchData: cardDataState.card3DataState,\n    searchHeaders: [\"name\"],\n    addButton: addButton3,\n    addFunction: addFunction3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 617\n    },\n    __self: this\n  }), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 624\n    },\n    __self: this\n  }, React.createElement(Table, {\n    className: classes.table,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 625\n    },\n    __self: this\n  }, React.createElement(TableBody, Object.assign({\n    innerRef: provided.innerRef\n  }, provided.droppableProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 626\n    },\n    __self: this\n  }), cardDataState.card3DataState.length !== 0 ? cardDataState.card3DataState.map((data, index) => React.createElement(Draggable, {\n    key: data.uuid,\n    draggableId: `${data.uuid}`,\n    index: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 633\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(TableRow, Object.assign({\n    className: classes.row,\n    innerRef: provided.innerRef\n  }, provided.draggableProps, {\n    style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 639\n    },\n    __self: this\n  }), React.createElement(TableCell, {\n    className: classes.cell,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 648\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 649\n    },\n    __self: this\n  }, React.createElement(Grid, Object.assign({\n    item: true,\n    style: {\n      width: 380\n    }\n  }, provided.dragHandleProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 650\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 655\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 656\n    },\n    __self: this\n  }, React.createElement(DragIcon, {\n    style: {\n      fontSize: 19\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 657\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 661\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 662\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 663\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 664\n    },\n    __self: this\n  }, data.name)), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 668\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"caption\",\n    style: {\n      color: \"#a3a3a3\",\n      textTransform: \"capitalize\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 669\n    },\n    __self: this\n  }, data.type)))))), card3Popover !== undefined ? React.createElement(Grid, {\n    item: true,\n    style: {\n      width: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 685\n    },\n    __self: this\n  }, React.createElement(SettingsIcon, {\n    \"aria-controls\": \"simple-menu\",\n    onClick: event => handleClickOpen(event, data),\n    style: {\n      fontSize: 19\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 691\n    },\n    __self: this\n  }), React.createElement(Menu, {\n    onClose: handClose,\n    anchorEl: anchorEl,\n    style: {\n      marginTop: 40\n    },\n    id: \"simple-menu\",\n    keepMounted: true,\n    open: open,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 699\n    },\n    __self: this\n  }, card3Popover)) : null))))) : React.createElement(CardNoResult, {\n    text: \"No Result\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 719\n    },\n    __self: this\n  }))))), provided.placeholder)))));\n};\n\nconst DNDCards = withStyles(style)(DNDCardsComp);\nexport { DNDCards };","map":{"version":3,"sources":["/home/webdev/Documents/react-portal/src/common-components/dnd-card/index.tsx"],"names":["React","useState","useEffect","CustomCard","CardHeader","CardBody","CardNoResult","TableRow","SettingsIcon","DragIcon","RemoveIcon","TableCell","DragDropContext","Droppable","Draggable","Grid","Typography","Table","TableBody","Collapse","CardContent","Button","Menu","MenuItem","withStyles","style","table","backgroundColor","row","height","cell","borderBottom","DNDCardsComp","card1Data","card2Data","card3Data","setActiveData","saveActiveSegment","classes","addButton1","addButton2","addButton3","addFunction1","addFunction2","addFunction3","card1Popover","card2Popover","card3Popover","card1Title","card2Title","card3Title","card1DataOrig","Setcard1DataOrig","card2DataOrig","Setcard2DataOrig","card3DataOrig","Setcard3DataOrig","card1PrevData","Setcard1PrevData","card2PrevData","Setcard2PrevData","card3PrevData","Setcard3PrevData","card1DataState","card2DataState","card3DataState","cardDataState","SetcardData","saveSetting","SetsaveSetting","anchorEl","SetanchorEl","open","Setopen","anchorElCard1","SetanchorElCard1","openCard1","SetopenCard1","activeData","SetactiveData","getFirst","n","x","firstChild","parentNode","nodeName","getRootNode","data","parser","DOMParser","theDom","parseFromString","rootNode","documentElement","id2List","droppable","droppable2","droppable3","getList","id","move","source","destination","droppableSource","droppableDestination","sourceClone","Array","from","destClone","splice","index","removed","result","droppableId","getItemStyle","isDragging","draggableStyle","onDragEnd","results","Cancel","handleClickOpen","event","currentTarget","handClose","handleClickOpenCard1","currentTarge","handCloseCard1","saveActiveSegments","undefined","DeactivateSegment","card1DataArr","card2DataArr","card3DataArr","includes","push","indexOf","provided","innerRef","droppableProps","paddingTop","paddingBottom","paddingLeft","paddingRight","fontWeight","length","map","uuid","draggableProps","dragHandleProps","name","color","textTransform","type","marginLeft","fontSize","marginTop","width","placeholder","snapshot","DNDCards"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  CustomCard,\n  CardHeader,\n  CardBody,\n  CardNoResult\n} from \"common-components\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport DragIcon from \"@material-ui/icons/DragHandle\";\nimport RemoveIcon from \"@material-ui/icons/RemoveCircle\";\n\nimport TableCell from \"@material-ui/core/TableCell\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport {\n  Grid,\n  Typography,\n  Table,\n  TableBody,\n  Collapse,\n  CardContent,\n  Button,\n  Menu,\n  MenuItem,\n  TableFooter\n} from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nconst style = {\n  table: {\n    backgroundColor: \"#FFF\"\n  },\n  row: {\n    height: 50,\n    \"&:nth-of-type(even)\": {\n      backgroundColor: \"#f8f9fa\"\n    },\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: \"#FFF\"\n    }\n  },\n  cell: {\n    borderBottom: \"none\"\n  }\n};\n\ninterface Props {\n  addButton1?: boolean;\n  addButton2?: boolean;\n  addButton3?: boolean;\n  addFunction1?: () => void;\n  addFunction2?: () => void;\n  addFunction3?: () => void;\n  card1Title: string;\n  card2Title: string;\n  card3Title: string;\n  card1Data: object[];\n  card2Data: object[];\n  card3Data: object[];\n  handleClickOpen: () => void;\n  setActiveData: (data: any) => any;\n  saveActiveSegment: Function;\n  card1Popover?: Element;\n  card2Popover?: Element;\n  card3Popover?: Element;\n  classes: any;\n}\n\nconst DNDCardsComp: React.SFC<Props> = ({\n  card1Data,\n  card2Data,\n  card3Data,\n  setActiveData,\n  saveActiveSegment,\n  classes,\n  addButton1,\n  addButton2,\n  addButton3,\n  addFunction1,\n  addFunction2,\n  addFunction3,\n  card1Popover,\n  card2Popover,\n  card3Popover,\n  card1Title,\n  card2Title,\n  card3Title\n}) => {\n  const [card1DataOrig, Setcard1DataOrig] = useState(card1Data);\n  const [card2DataOrig, Setcard2DataOrig] = useState(card2Data);\n  const [card3DataOrig, Setcard3DataOrig] = useState(card3Data);\n  const [card1PrevData, Setcard1PrevData] = useState(card1Data);\n  const [card2PrevData, Setcard2PrevData] = useState(card2Data);\n  const [card3PrevData, Setcard3PrevData] = useState(card3Data);\n  const [cardDataState, SetcardData] = useState<any>({\n    card1DataState: card1Data,\n    card2DataState: card2Data,\n    card3DataState: card3Data\n  });\n  const [saveSetting, SetsaveSetting] = useState(false);\n  const [anchorEl, SetanchorEl] = useState(null);\n  const [open, Setopen] = useState(false);\n  const [anchorElCard1, SetanchorElCard1] = useState(null);\n  const [openCard1, SetopenCard1] = useState(false);\n  const [activeData, SetactiveData] = useState([]);\n\n  useEffect(() => {\n    Setcard1DataOrig(card1Data);\n  });\n\n  const getFirst = (n: any) => {\n    var x = n.firstChild;\n    // while (x.nodeType != 1) {\n    //   x = x.nextSibling;\n    // }\n    return x.parentNode.nodeName;\n  };\n  const getRootNode = (data: any) => {\n    const parser = new DOMParser();\n    const theDom = parser.parseFromString(data, \"application/xml\");\n    const rootNode = getFirst(theDom.documentElement);\n\n    return rootNode;\n  };\n\n  const id2List: any = {\n    droppable: \"card1DataState\",\n    droppable2: \"card2DataState\",\n    droppable3: \"card3DataState\"\n  };\n\n  const getList = (id: any) => cardDataState[id2List[id]];\n  const move = (\n    source: any,\n    destination: any,\n    droppableSource: any,\n    droppableDestination: any\n  ) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result: any = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n  };\n  const getItemStyle = (isDragging: any, draggableStyle: any) => ({\n    // change background colour if dragging\n    // background: isDragging ? `#f8f9fa` : \"\",\n\n    // styles we need to apply on draggables\n    ...draggableStyle\n  });\n\n  const onDragEnd = (result: any) => {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n    if (destination.droppableId !== \"droppable\") {\n      return;\n    }\n\n    const results: any = move(\n      getList(source.droppableId),\n      getList(destination.droppableId),\n      source,\n      destination\n    );\n    if (\n      destination.droppableId === \"droppable\" &&\n      source.droppableId === \"droppable2\"\n    ) {\n      SetcardData({\n        ...cardDataState,\n        card1DataState: results.droppable,\n        card2DataState: results.droppable2\n      });\n      SetsaveSetting(true);\n      // this.setState({\n      //   card1Data: results.droppable,\n      //   card2Data: results.droppable2,\n      //   saveSetting: true\n      // });\n    } else if (\n      destination.droppableId === \"droppable\" &&\n      source.droppableId === \"droppable3\"\n    ) {\n      SetcardData({\n        ...cardDataState,\n        card1DataState: results.droppable,\n        card3DataState: results.droppable3\n      });\n      SetsaveSetting(true);\n      // this.setState({\n      //   card1Data: results.droppable,\n      //   card3Data: results.droppable3,\n      //   saveSetting: true\n      // });\n    } else {\n      return;\n    }\n  };\n\n  const Cancel = () => {\n    SetcardData({\n      ...cardDataState,\n      card1DataState: card1PrevData,\n      card2DataState: card2PrevData,\n      card3DataState: card3PrevData\n    });\n    SetsaveSetting(false);\n    // this.setState({\n    //   card1Data: this.state.card1PrevData,\n    //   card2Data: this.state.card2PrevData,\n    //   card3Data: this.state.card3PrevData,\n    //   saveSetting: false\n    // });\n  };\n\n  const handleClickOpen = (event: any, data: any) => {\n    SetanchorEl(event.currentTarget);\n    Setopen(!open);\n    // this.setState({\n    //   anchorEl : event.currentTarget,\n    //   open: !this.state.open\n    // });\n\n    setActiveData(data);\n  };\n\n  const handClose = () => {\n    Setopen(false);\n    // this.setState({\n    //   open: false\n    // });\n\n    // setActiveData(data);\n  };\n\n  const handleClickOpenCard1 = (event: any, data: any) => {\n    SetanchorElCard1(event.currentTarge);\n    SetopenCard1(!open);\n    SetactiveData(data);\n    // this.setState({\n    //   anchorElCard1: event.currentTarget,\n    //   openCard1: !this.state.open,\n    //   activeData: data\n    // });\n\n    setActiveData(data);\n  };\n\n  const handCloseCard1 = () => {\n    SetopenCard1(false);\n    // this.setState({\n    //   openCard1: false\n    // });\n\n    // setActiveData(data);\n  };\n  const saveActiveSegments = () => {\n    if (saveActiveSegment !== undefined) {\n      saveActiveSegment(cardDataState.card1DataState);\n      Setcard1PrevData(cardDataState.card1DataState);\n      Setcard2PrevData(cardDataState.card2DataState);\n      Setcard3PrevData(cardDataState.card3DataState);\n      SetsaveSetting(false);\n      // this.setState({\n      //   card1PrevData: this.state.card1Data,\n      //   card2PrevData: this.state.card2Data,\n      //   card3PrevData: this.state.card3Data,\n      //   saveSetting: false\n      // });\n    }\n  };\n\n  const DeactivateSegment = () => {\n    var card1DataArr = [...cardDataState.card1DataState];\n    var card2DataArr = [...cardDataState.card2DataState];\n    var card3DataArr = [...cardDataState.card3DataState];\n\n    if (card2DataOrig.includes(activeData)) {\n      card2DataArr.push(activeData);\n    } else if (card3DataOrig.includes(activeData)) {\n      card3DataArr.push(activeData);\n    }\n    var index = card1DataArr.indexOf(activeData);\n    if (index > -1) {\n      card1DataArr.splice(index, 1);\n    }\n\n    SetcardData({\n      ...cardDataState,\n      card1DataState: card1DataArr,\n      card2DataState: card2DataArr,\n      card3DataState: card3DataArr\n    });\n    SetopenCard1(false);\n    SetsaveSetting(true);\n    // this.setState({\n    //   card1Data: card1DataArr,\n    //   card2Data: card2DataArr,\n    //   card3Data: card3DataArr,\n    //   openCard1: false,\n    //   saveSetting: true\n    // });\n  };\n\n  // const { classes } = this.props;\n  //props : card1Title , addButton1,addButton2,addButton3, addFunction1,addFunction2,addFunction3, card3Popover , card2Title , card3Title\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Grid container spacing={5}>\n        <Grid item xs={4}>\n          <Droppable droppableId=\"droppable\">\n            {(provided: any) => (\n              <>\n                <CustomCard>\n                  <CardHeader\n                    title={`${card1Title}`}\n                    searchData={cardDataState.card1DataState}\n                    searchHeaders={[\"name\"]}\n                    addButton={addButton1}\n                    addFunction={addFunction1}\n                  />\n\n                  <CardBody>\n                    <CardContent style={{ backgroundColor: \"#FFF\" }}>\n                      <Typography variant=\"h6\">\n                        Work in progress section\n                      </Typography>\n                      <Typography variant=\"caption\">\n                        still needs the api for this section\n                      </Typography>\n                    </CardContent>\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.droppableProps}\n                      style={{ height: \"100%\" }}\n                    >\n                      <Collapse in={saveSetting} timeout={1000} unmountOnExit>\n                        <CardContent style={{ backgroundColor: \"#FFF\" }}>\n                          <Grid container justify=\"space-around\">\n                            <Grid item>\n                              <Button\n                                onClick={saveActiveSegments}\n                                style={{\n                                  paddingTop: 10,\n                                  paddingBottom: 10,\n                                  paddingLeft: 70,\n                                  paddingRight: 70,\n                                  fontWeight: \"bold\"\n                                }}\n                              >\n                                Save\n                              </Button>\n                            </Grid>\n                            <Grid item>\n                              <Button\n                                style={{\n                                  paddingTop: 10,\n                                  paddingBottom: 10,\n                                  paddingLeft: 70,\n                                  paddingRight: 70,\n                                  fontWeight: \"bold\"\n                                }}\n                                onClick={Cancel}\n                              >\n                                Cancel\n                              </Button>\n                            </Grid>\n                          </Grid>\n                        </CardContent>\n                      </Collapse>\n\n                      <Table className={classes.table}>\n                        <TableBody>\n                          {cardDataState.card1DataState.length !== 0 ? (\n                            cardDataState.card1DataState.map(\n                              (data: any, index: number) => (\n                                <Draggable\n                                  isDragDisabled={true}\n                                  key={data.uuid}\n                                  draggableId={`${index}`}\n                                  index={index}\n                                >\n                                  {(provided: any) => (\n                                    <TableRow\n                                      className={classes.row}\n\n                                      // style={this.getItemStyle(\n                                      //   snapshot.isDragging,\n                                      //   provided.draggableProps.style\n                                      // )}\n                                    >\n                                      <TableCell\n                                        className={classes.cell}\n                                        innerRef={provided.innerRef}\n                                        {...provided.draggableProps}\n                                        {...provided.dragHandleProps}\n                                      >\n                                        <Grid container spacing={3}>\n                                          <Grid item>\n                                            <Grid container>\n                                              <Grid item xs={12}>\n                                                <Typography>\n                                                  {data.name}\n                                                </Typography>\n                                              </Grid>\n                                              <Grid item xs={12}>\n                                                <Typography\n                                                  variant=\"caption\"\n                                                  style={{\n                                                    color: \"#a3a3a3\",\n                                                    textTransform: \"capitalize\"\n                                                  }}\n                                                >\n                                                  {data.type}\n                                                </Typography>\n                                              </Grid>\n                                            </Grid>\n                                          </Grid>\n                                          <Grid\n                                            item\n                                            style={{ marginLeft: \"auto\" }}\n                                          >\n                                            <SettingsIcon\n                                              style={{ fontSize: 19 }}\n                                              onClick={event =>\n                                                handleClickOpenCard1(\n                                                  event,\n                                                  data\n                                                )\n                                              }\n                                            />\n                                            <Menu\n                                              onClose={handCloseCard1}\n                                              anchorEl={anchorElCard1}\n                                              style={{ marginTop: 40 }}\n                                              id=\"simple-menu\"\n                                              keepMounted\n                                              open={openCard1}\n                                            >\n                                              {card2DataOrig.includes(\n                                                activeData\n                                              ) ? (\n                                                <MenuItem\n                                                  style={{\n                                                    color: \"#777777\",\n                                                    width: 250,\n                                                    paddingTop: 0,\n                                                    paddingBottom: 0\n                                                  }}\n                                                  onClick={DeactivateSegment}\n                                                >\n                                                  <RemoveIcon />\n                                                  <Typography\n                                                    style={{ marginLeft: 40 }}\n                                                  >\n                                                    Deactivate\n                                                  </Typography>\n                                                </MenuItem>\n                                              ) : card3Popover !== undefined ? (\n                                                <>\n                                                  {card3Popover}\n                                                  <MenuItem\n                                                    style={{\n                                                      color: \"#777777\",\n                                                      width: 250,\n                                                      paddingTop: 0,\n                                                      paddingBottom: 0\n                                                    }}\n                                                    onClick={DeactivateSegment}\n                                                  >\n                                                    <RemoveIcon />\n                                                    <Typography\n                                                      style={{ marginLeft: 40 }}\n                                                    >\n                                                      Deactivate\n                                                    </Typography>\n                                                  </MenuItem>\n                                                </>\n                                              ) : (\n                                                <MenuItem\n                                                  style={{\n                                                    color: \"#777777\",\n                                                    width: 250,\n                                                    paddingTop: 0,\n                                                    paddingBottom: 0\n                                                  }}\n                                                  onClick={DeactivateSegment}\n                                                >\n                                                  <RemoveIcon />\n                                                  <Typography\n                                                    style={{ marginLeft: 40 }}\n                                                  >\n                                                    Deactivate\n                                                  </Typography>\n                                                </MenuItem>\n                                              )}\n                                            </Menu>\n                                          </Grid>\n                                        </Grid>\n                                      </TableCell>\n                                    </TableRow>\n                                  )}\n                                </Draggable>\n                              )\n                            )\n                          ) : (\n                            <CardNoResult text=\"No Result\" />\n                          )}\n                        </TableBody>\n                      </Table>\n                    </div>\n                  </CardBody>\n                </CustomCard>\n\n                {provided.placeholder}\n              </>\n            )}\n          </Droppable>\n        </Grid>\n        <Grid item xs={4}>\n          <Droppable droppableId=\"droppable2\" isDropDisabled={true}>\n            {(provided: any) => (\n              <>\n                <CustomCard>\n                  <CardHeader\n                    title={`${card2Title}`}\n                    searchData={cardDataState.card2DataState}\n                    searchHeaders={[\"name\"]}\n                    addButton={addButton2}\n                    addFunction={addFunction2}\n                  />\n                  <CardBody>\n                    <Table className={classes.table}>\n                      <TableBody\n                        innerRef={provided.innerRef}\n                        {...provided.droppableProps}\n                      >\n                        {cardDataState.card2DataState.length !== 0 ? (\n                          cardDataState.card2DataState.map(\n                            (data: any, index: number) => (\n                              <Draggable\n                                key={data.uuid}\n                                draggableId={`${data.uuid}`}\n                                index={index}\n                              >\n                                {(provided: any) => (\n                                  <TableRow\n                                    className={classes.row}\n                                    innerRef={provided.innerRef}\n                                    {...provided.draggableProps}\n                                    {...provided.dragHandleProps}\n                                    // style={this.getItemStyle(\n                                    //   snapshot.isDragging,\n                                    //   provided.draggableProps.style\n                                    // )}\n                                  >\n                                    <TableCell className={classes.cell}>\n                                      <Grid container spacing={3}>\n                                        <Grid item>\n                                          <DragIcon style={{ fontSize: 19 }} />\n                                        </Grid>\n                                        <Grid item>\n                                          <Grid container>\n                                            <Grid item xs={12}>\n                                              <Typography>\n                                                {data.name}\n                                              </Typography>\n                                            </Grid>\n                                            <Grid item xs={12}>\n                                              <Typography\n                                                variant=\"caption\"\n                                                style={{\n                                                  color: \"#a3a3a3\",\n                                                  textTransform: \"capitalize\"\n                                                }}\n                                              >\n                                                {data.type}\n                                              </Typography>\n                                            </Grid>\n                                          </Grid>\n                                        </Grid>\n                                      </Grid>\n                                    </TableCell>\n                                  </TableRow>\n                                )}\n                              </Draggable>\n                            )\n                          )\n                        ) : (\n                          <CardNoResult text=\"No Result\" />\n                        )}\n                      </TableBody>\n                    </Table>\n                  </CardBody>\n                </CustomCard>\n\n                {provided.placeholder}\n              </>\n            )}\n          </Droppable>\n        </Grid>\n        <Grid item xs={4}>\n          <Droppable droppableId=\"droppable3\" isDropDisabled={true}>\n            {(provided: any) => (\n              <>\n                <CustomCard>\n                  <CardHeader\n                    title={`${card3Title}`}\n                    searchData={cardDataState.card3DataState}\n                    searchHeaders={[\"name\"]}\n                    addButton={addButton3}\n                    addFunction={addFunction3}\n                  />\n                  <CardBody>\n                    <Table className={classes.table}>\n                      <TableBody\n                        innerRef={provided.innerRef}\n                        {...provided.droppableProps}\n                      >\n                        {cardDataState.card3DataState.length !== 0 ? (\n                          cardDataState.card3DataState.map(\n                            (data: any, index: number) => (\n                              <Draggable\n                                key={data.uuid}\n                                draggableId={`${data.uuid}`}\n                                index={index}\n                              >\n                                {(provided: any, snapshot: any) => (\n                                  <TableRow\n                                    className={classes.row}\n                                    innerRef={provided.innerRef}\n                                    {...provided.draggableProps}\n                                    style={getItemStyle(\n                                      snapshot.isDragging,\n                                      provided.draggableProps.style\n                                    )}\n                                  >\n                                    <TableCell className={classes.cell}>\n                                      <Grid container spacing={3}>\n                                        <Grid\n                                          item\n                                          style={{ width: 380 }}\n                                          {...provided.dragHandleProps}\n                                        >\n                                          <Grid container spacing={3}>\n                                            <Grid item>\n                                              <DragIcon\n                                                style={{ fontSize: 19 }}\n                                              />\n                                            </Grid>\n                                            <Grid item>\n                                              <Grid container>\n                                                <Grid item xs={12}>\n                                                  <Typography>\n                                                    {data.name}\n                                                  </Typography>\n                                                </Grid>\n                                                <Grid item xs={12}>\n                                                  <Typography\n                                                    variant=\"caption\"\n                                                    style={{\n                                                      color: \"#a3a3a3\",\n                                                      textTransform:\n                                                        \"capitalize\"\n                                                    }}\n                                                  >\n                                                    {data.type}\n                                                  </Typography>\n                                                </Grid>\n                                              </Grid>\n                                            </Grid>\n                                          </Grid>\n                                        </Grid>\n                                        {card3Popover !== undefined ? (\n                                          <Grid\n                                            item\n                                            style={{\n                                              width: 10\n                                            }}\n                                          >\n                                            <SettingsIcon\n                                              aria-controls=\"simple-menu\"\n                                              onClick={event =>\n                                                handleClickOpen(event, data)\n                                              }\n                                              style={{ fontSize: 19 }}\n                                            />\n\n                                            <Menu\n                                              onClose={handClose}\n                                              anchorEl={anchorEl}\n                                              style={{ marginTop: 40 }}\n                                              id=\"simple-menu\"\n                                              keepMounted\n                                              open={open}\n                                            >\n                                              {card3Popover}\n                                            </Menu>\n                                          </Grid>\n                                        ) : null}\n                                      </Grid>\n                                    </TableCell>\n                                  </TableRow>\n                                )}\n                              </Draggable>\n                            )\n                          )\n                        ) : (\n                          <CardNoResult text=\"No Result\" />\n                        )}\n                      </TableBody>\n                    </Table>\n                  </CardBody>\n                </CustomCard>\n\n                {provided.placeholder}\n              </>\n            )}\n          </Droppable>\n        </Grid>\n      </Grid>\n    </DragDropContext>\n  );\n};\nconst DNDCards = withStyles(style)(DNDCardsComp);\n\nexport { DNDCards };\n"]},"metadata":{},"sourceType":"module"}