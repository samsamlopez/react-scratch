{"ast":null,"code":"import _slicedToArray from \"/home/webdev/Documents/react-portal/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/webdev/Documents/react-portal/src/components/manage/manage-realms/settings/index.js\";\nimport React, { useState } from \"react\"; // import NavTabs from \"../../../common-components/nav-tabs/Settings-menu-bar\";\n\n/*COMPONENTS*/\n\nimport { TableLoader } from \"common-components\"; // import { get, patch, post, cancel, getGroups } from \"../../../../utils/api\";\n// import RealmSettings from \"./realmSettings\";\n\nconst RealmSettingsPage = () => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        dataLoaded = _useState2[0],\n        setDataLoaded = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        realm = _useState4[0],\n        setRealm = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        active = _useState6[0],\n        setActive = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        name = _useState8[0],\n        setName = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        saveLoader = _useState10[0],\n        setSaveLoader = _useState10[1];\n\n  const _useState11 = useState([]),\n        _useState12 = _slicedToArray(_useState11, 2),\n        campaigns = _useState12[0],\n        setCampaigns = _useState12[1];\n\n  const _useState13 = useState([]),\n        _useState14 = _slicedToArray(_useState13, 2),\n        paginateList = _useState14[0],\n        setPaginateList = _useState14[1];\n\n  const _useState15 = useState([]),\n        _useState16 = _slicedToArray(_useState15, 2),\n        campaignsOrig = _useState16[0],\n        setCampaignsOrig = _useState16[1];\n\n  const initialData = {}; // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     dataLoaded: false,\n  //     realm: null,\n  //     active: null,\n  //     name: \"\",\n  //     saveLoader: false,\n  //     campaigns: [],\n  //     paginateList: [],\n  //     campaignsOrig: []\n  //   };\n  //   this.initialData = {};\n  // }\n  // async componentDidMount() {\n  //   let active, name;\n  //   await get(`/identity/realm/${this.props.match.params.uuid}/`).then(\n  //     result => {\n  //       active = result.data.active;\n  //       name = result.data.name;\n  //       this.setState({\n  //         realm: result.data,\n  //         active,\n  //         name,\n  //         campaigns: result.data.campaigns,\n  //         campaignsOrig: result.data.campaigns,\n  //         paginateList: result.data.campaigns\n  //       });\n  //     }\n  //   );\n  //   this.initialData = { active, name };\n  //   this.setState({ dataLoaded: true });\n  // }\n  // handleActive = () => {\n  //   this.setState({\n  //     active: !this.state.active\n  //   });\n  // };\n  // handleName = value => {\n  //   this.setState({ name: value });\n  // };\n  // updateRealm = () => {\n  //   const { active, name, campaigns, paginateList } = this.state;\n  //   this.setState({ saveLoader: true });\n  //   patch(`/identity/realm/${this.props.match.params.uuid}/`, {\n  //     active,\n  //     name,\n  //     campaigns: paginateList\n  //   }).then(res => {\n  //     this.initialData = { active: res.data.active, name: res.data.name };\n  //     this.setState({\n  //       realm: res.data,\n  //       saveLoader: false,\n  //       active: res.data.active,\n  //       name: res.data.name\n  //     });\n  //   });\n  // };\n  // addCampaign = async campaign => {\n  //   let arrCamp = [...campaign, ...this.state.campaignsOrig];\n  //   /* campaign.map(camp => {\n  //     arrCamp.push(camp);\n  //   }); */\n  //   this.setState({\n  //     campaigns: arrCamp,\n  //     campaignsOrig: arrCamp,\n  //     paginateList: arrCamp\n  //   });\n  //   const update = await patch(\n  //     `/identity/realm/${this.props.match.params.uuid}/`,\n  //     {\n  //       campaigns: arrCamp\n  //     }\n  //   );\n  //   return update;\n  // };\n  // removeCampaign = async uuid => {\n  //   var campaigns = this.state.paginateList.filter(camp => {\n  //     return camp.uuid !== uuid;\n  //   });\n  //   this.setState({ campaigns, paginateList: campaigns });\n  //   const update = await patch(\n  //     `/identity/realm/${this.props.match.params.uuid}/`,\n  //     { campaigns }\n  //   );\n  //   return update;\n  // };\n  // paginate = (from, to) => {\n  //   const campaigns = this.state.paginateList.slice(from, to);\n  //   this.setState({ campaigns });\n  // };\n\n  var edit = JSON.stringify(initialData) === JSON.stringify({\n    active,\n    name\n  }) ? false : name.length === 0 ? false : true;\n\n  if (dataLoaded) {\n    return React.createElement(React.Fragment, null, React.createElement(TableLoader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }));\n  } else {\n    return React.createElement(TableLoader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    });\n  }\n};\n\nexport { RealmSettingsPage };","map":{"version":3,"sources":["/home/webdev/Documents/react-portal/src/components/manage/manage-realms/settings/index.js"],"names":["React","useState","TableLoader","RealmSettingsPage","dataLoaded","setDataLoaded","realm","setRealm","active","setActive","name","setName","saveLoader","setSaveLoader","campaigns","setCampaigns","paginateList","setPaginateList","campaignsOrig","setCampaignsOrig","initialData","edit","JSON","stringify","length"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;;AACA;;AACA,SAASC,WAAT,QAA4B,mBAA5B,C,CAEA;AAEA;;AAIA,MAAMC,iBAAiB,GAAG,MAAM;AAAA,oBAEMF,QAAQ,CAAC,KAAD,CAFd;AAAA;AAAA,QAEvBG,UAFuB;AAAA,QAEXC,aAFW;;AAAA,qBAGJJ,QAAQ,CAAC,IAAD,CAHJ;AAAA;AAAA,QAGvBK,KAHuB;AAAA,QAGhBC,QAHgB;;AAAA,qBAIFN,QAAQ,CAAC,IAAD,CAJN;AAAA;AAAA,QAIvBO,MAJuB;AAAA,QAIfC,SAJe;;AAAA,qBAKNR,QAAQ,CAAC,EAAD,CALF;AAAA;AAAA,QAKvBS,IALuB;AAAA,QAKjBC,OALiB;;AAAA,qBAMMV,QAAQ,CAAC,KAAD,CANd;AAAA;AAAA,QAMvBW,UANuB;AAAA,QAMXC,aANW;;AAAA,sBAOIZ,QAAQ,CAAC,EAAD,CAPZ;AAAA;AAAA,QAOvBa,SAPuB;AAAA,QAOZC,YAPY;;AAAA,sBAQUd,QAAQ,CAAC,EAAD,CARlB;AAAA;AAAA,QAQvBe,YARuB;AAAA,QAQTC,eARS;;AAAA,sBASYhB,QAAQ,CAAC,EAAD,CATpB;AAAA;AAAA,QASvBiB,aATuB;AAAA,QASRC,gBATQ;;AAU9B,QAAMC,WAAW,GAAG,EAApB,CAV8B,CAa9B;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAGA,MAAIC,IAAI,GACNC,IAAI,CAACC,SAAL,CAAeH,WAAf,MAAgCE,IAAI,CAACC,SAAL,CAAe;AAAEf,IAAAA,MAAF;AAAUE,IAAAA;AAAV,GAAf,CAAhC,GACI,KADJ,GAEIA,IAAI,CAACc,MAAL,KAAgB,CAAhB,GACE,KADF,GAEE,IALR;;AAMA,MAAIpB,UAAJ,EAAgB;AACd,WACE,0CACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AA6BD,GA9BD,MA8BO;AACL,WAAO,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AAEF,CA5JD;;AA8JA,SAASD,iBAAT","sourcesContent":["import React, { useState } from \"react\";\n// import NavTabs from \"../../../common-components/nav-tabs/Settings-menu-bar\";\n/*COMPONENTS*/\nimport { TableLoader } from \"common-components\";\n\n// import { get, patch, post, cancel, getGroups } from \"../../../../utils/api\";\n\n// import RealmSettings from \"./realmSettings\";\n\n\n\nconst RealmSettingsPage = () => {\n\n  const [dataLoaded, setDataLoaded] = useState(false);\n  const [realm, setRealm] = useState(null);\n  const [active, setActive] = useState(null);\n  const [name, setName] = useState(\"\");\n  const [saveLoader, setSaveLoader] = useState(false);\n  const [campaigns, setCampaigns] = useState([]);\n  const [paginateList, setPaginateList] = useState([]);\n  const [campaignsOrig, setCampaignsOrig] = useState([]);\n  const initialData = {};\n\n\n  // constructor(props) {\n  //   super(props);\n\n  //   this.state = {\n  //     dataLoaded: false,\n  //     realm: null,\n  //     active: null,\n  //     name: \"\",\n  //     saveLoader: false,\n  //     campaigns: [],\n  //     paginateList: [],\n  //     campaignsOrig: []\n  //   };\n  //   this.initialData = {};\n  // }\n\n  // async componentDidMount() {\n  //   let active, name;\n  //   await get(`/identity/realm/${this.props.match.params.uuid}/`).then(\n  //     result => {\n  //       active = result.data.active;\n  //       name = result.data.name;\n  //       this.setState({\n  //         realm: result.data,\n  //         active,\n  //         name,\n  //         campaigns: result.data.campaigns,\n  //         campaignsOrig: result.data.campaigns,\n  //         paginateList: result.data.campaigns\n  //       });\n  //     }\n  //   );\n  //   this.initialData = { active, name };\n  //   this.setState({ dataLoaded: true });\n  // }\n\n  // handleActive = () => {\n  //   this.setState({\n  //     active: !this.state.active\n  //   });\n  // };\n\n  // handleName = value => {\n  //   this.setState({ name: value });\n  // };\n\n  // updateRealm = () => {\n  //   const { active, name, campaigns, paginateList } = this.state;\n  //   this.setState({ saveLoader: true });\n  //   patch(`/identity/realm/${this.props.match.params.uuid}/`, {\n  //     active,\n  //     name,\n  //     campaigns: paginateList\n  //   }).then(res => {\n  //     this.initialData = { active: res.data.active, name: res.data.name };\n  //     this.setState({\n  //       realm: res.data,\n  //       saveLoader: false,\n  //       active: res.data.active,\n  //       name: res.data.name\n  //     });\n  //   });\n  // };\n\n  // addCampaign = async campaign => {\n  //   let arrCamp = [...campaign, ...this.state.campaignsOrig];\n\n  //   /* campaign.map(camp => {\n  //     arrCamp.push(camp);\n  //   }); */\n\n  //   this.setState({\n  //     campaigns: arrCamp,\n  //     campaignsOrig: arrCamp,\n  //     paginateList: arrCamp\n  //   });\n  //   const update = await patch(\n  //     `/identity/realm/${this.props.match.params.uuid}/`,\n  //     {\n  //       campaigns: arrCamp\n  //     }\n  //   );\n  //   return update;\n  // };\n\n  // removeCampaign = async uuid => {\n  //   var campaigns = this.state.paginateList.filter(camp => {\n  //     return camp.uuid !== uuid;\n  //   });\n  //   this.setState({ campaigns, paginateList: campaigns });\n  //   const update = await patch(\n  //     `/identity/realm/${this.props.match.params.uuid}/`,\n  //     { campaigns }\n  //   );\n  //   return update;\n  // };\n\n  // paginate = (from, to) => {\n  //   const campaigns = this.state.paginateList.slice(from, to);\n  //   this.setState({ campaigns });\n  // };\n\n\n  var edit =\n    JSON.stringify(initialData) === JSON.stringify({ active, name })\n      ? false\n      : name.length === 0\n        ? false\n        : true;\n  if (dataLoaded) {\n    return (\n      <>\n        <TableLoader />\n        {/* <NavTabs\n            data={realm}\n            tabnames={[]}\n            history={realm}\n            back={{\n              name: \"Back to realms\",\n              url: \"/manage/realms/\"\n            }}\n          />\n          <RealmSettings\n            active={active}\n            realm={realm}\n            handleActive={this.handleActive}\n            handleName={this.handleName}\n            edit={edit}\n            updateRealm={this.updateRealm}\n            saveLoader={saveLoader}\n            campaigns={campaigns}\n            campaignsOrig={this.state.campaignsOrig}\n            removeCampaign={this.removeCampaign}\n            paginateList={paginateList}\n            paginateFn={this.paginate}\n            addCampaign={this.addCampaign}\n          /> */}\n      </>\n    );\n  } else {\n    return <TableLoader />;\n  }\n\n}\n\nexport { RealmSettingsPage };\n"]},"metadata":{},"sourceType":"module"}