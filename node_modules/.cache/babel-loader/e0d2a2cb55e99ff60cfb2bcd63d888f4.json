{"ast":null,"code":"import _slicedToArray from \"/home/webdev/Documents/react-portal/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/webdev/Documents/react-portal/src/components/manage/manage-realms/settings/index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { NavTabs } from \"common-components\";\n/*COMPONENTS*/\n\nimport { TableLoader } from \"common-components\";\nimport { MockRealm, MockCampaigns, MockRealmData } from '../components/contsVar'; // import { get, patch, post, cancel, getGroups } from \"../../../../utils/api\";\n// import RealmSettings from \"./realmSettings\";\n\nconst RealmSettingsPage = () => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        dataLoaded = _useState2[0],\n        setDataLoaded = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        realm = _useState4[0],\n        setRealm = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        active = _useState6[0],\n        setActive = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        name = _useState8[0],\n        setName = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        saveLoader = _useState10[0],\n        setSaveLoader = _useState10[1];\n\n  const _useState11 = useState([]),\n        _useState12 = _slicedToArray(_useState11, 2),\n        campaigns = _useState12[0],\n        setCampaigns = _useState12[1];\n\n  const _useState13 = useState([]),\n        _useState14 = _slicedToArray(_useState13, 2),\n        paginateList = _useState14[0],\n        setPaginateList = _useState14[1];\n\n  const _useState15 = useState([]),\n        _useState16 = _slicedToArray(_useState15, 2),\n        campaignsOrig = _useState16[0],\n        setCampaignsOrig = _useState16[1];\n\n  let initialData = {}; // async componentDidMount() {\n  //   let active, name;\n  //   await get(`/identity/realm/${this.props.match.params.uuid}/`).then(\n  //     result => {\n  //       active = result.data.active;\n  //       name = result.data.name;\n  //       this.setState({\n  //         realm: result.data,\n  //         active,\n  //         name,\n  //         campaigns: result.data.campaigns,\n  //         campaignsOrig: result.data.campaigns,\n  //         paginateList: result.data.campaigns\n  //       });\n  //     }\n  //   );\n  //   this.initialData = { active, name };\n  //   this.setState({ dataLoaded: true });\n  // }\n\n  useEffect(() => {\n    // activeTemp = result.data.active;\n    setRealm(MockRealmData);\n    setActive(true);\n    setName(\"Test\");\n    setCampaigns(MockCampaigns);\n    setCampaignsOrig(MockCampaigns);\n    setPaginateList(MockCampaigns); // this.initialData = { active, name };\n\n    setTimeout(() => {\n      setDataLoaded(true);\n    }, 1500);\n  }, []);\n\n  const handleActive = () => {\n    setActive(!this.state.active);\n  };\n\n  const handleName = value => {\n    setName(value);\n  };\n\n  const updateRealm = () => {// const { active, name, campaigns, paginateList } = this.state;\n    // this.setState({ saveLoader: true });\n    // patch(`/identity/realm/${this.props.match.params.uuid}/`, {\n    //   active,\n    //   name,\n    //   campaigns: paginateList\n    // }).then(res => {\n    //   this.initialData = { active: res.data.active, name: res.data.name };\n    //   this.setState({\n    //     realm: res.data,\n    //     saveLoader: false,\n    //     active: res.data.active,\n    //     name: res.data.name\n    //   });\n    // });\n  };\n\n  const addCampaign = async campaign => {// let arrCamp = [...campaign, ...this.state.campaignsOrig];\n    // /* campaign.map(camp => {\n    //   arrCamp.push(camp);\n    // }); */\n    // this.setState({\n    //   campaigns: arrCamp,\n    //   campaignsOrig: arrCamp,\n    //   paginateList: arrCamp\n    // });\n    // const update = await patch(\n    //   `/identity/realm/${this.props.match.params.uuid}/`,\n    //   {\n    //     campaigns: arrCamp\n    //   }\n    // );\n    // return update;\n  };\n\n  const removeCampaign = async uuid => {// var campaigns = this.state.paginateList.filter(camp => {\n    //   return camp.uuid !== uuid;\n    // });\n    // this.setState({ campaigns, paginateList: campaigns });\n    // const update = await patch(\n    //   `/identity/realm/${this.props.match.params.uuid}/`,\n    //   { campaigns }\n    // );\n    // return update;\n  };\n\n  const paginate = (from, to) => {\n    const campaignsTemp = paginateList.slice(from, to);\n    setCampaigns(campaignsTemp);\n  };\n\n  var edit = JSON.stringify(initialData) === JSON.stringify({\n    active,\n    name\n  }) ? false : name.length === 0 ? false : true;\n\n  if (dataLoaded) {\n    return React.createElement(React.Fragment, null, React.createElement(NavTabs, {\n      data: realm,\n      tabnames: [],\n      history: realm,\n      back: {\n        name: \"Back to realms\",\n        url: \"/manage/realms/\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }));\n  } else {\n    return React.createElement(TableLoader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    });\n  }\n};\n\nexport { RealmSettingsPage };","map":{"version":3,"sources":["/home/webdev/Documents/react-portal/src/components/manage/manage-realms/settings/index.js"],"names":["React","useState","useEffect","NavTabs","TableLoader","MockRealm","MockCampaigns","MockRealmData","RealmSettingsPage","dataLoaded","setDataLoaded","realm","setRealm","active","setActive","name","setName","saveLoader","setSaveLoader","campaigns","setCampaigns","paginateList","setPaginateList","campaignsOrig","setCampaignsOrig","initialData","setTimeout","handleActive","state","handleName","value","updateRealm","addCampaign","campaign","removeCampaign","uuid","paginate","from","to","campaignsTemp","slice","edit","JSON","stringify","length","url"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { NavTabs } from \"common-components\";\n/*COMPONENTS*/\nimport { TableLoader } from \"common-components\";\nimport {\n  MockRealm,\n  MockCampaigns,\n  MockRealmData\n} from '../components/contsVar'\n// import { get, patch, post, cancel, getGroups } from \"../../../../utils/api\";\n\n// import RealmSettings from \"./realmSettings\";\n\n\n\nconst RealmSettingsPage = () => {\n\n  const [dataLoaded, setDataLoaded] = useState(false);\n  const [realm, setRealm] = useState(null);\n  const [active, setActive] = useState(null);\n  const [name, setName] = useState(\"\");\n  const [saveLoader, setSaveLoader] = useState(false);\n  const [campaigns, setCampaigns] = useState([]);\n  const [paginateList, setPaginateList] = useState([]);\n  const [campaignsOrig, setCampaignsOrig] = useState([]);\n  let initialData = {};\n\n  // async componentDidMount() {\n  //   let active, name;\n  //   await get(`/identity/realm/${this.props.match.params.uuid}/`).then(\n  //     result => {\n  //       active = result.data.active;\n  //       name = result.data.name;\n  //       this.setState({\n  //         realm: result.data,\n  //         active,\n  //         name,\n  //         campaigns: result.data.campaigns,\n  //         campaignsOrig: result.data.campaigns,\n  //         paginateList: result.data.campaigns\n  //       });\n  //     }\n  //   );\n  //   this.initialData = { active, name };\n  //   this.setState({ dataLoaded: true });\n  // }\n\n  useEffect(() => {\n    // activeTemp = result.data.active;\n\n    setRealm(MockRealmData)\n    setActive(true)\n    setName(\"Test\")\n    setCampaigns(MockCampaigns)\n    setCampaignsOrig(MockCampaigns)\n    setPaginateList(MockCampaigns)\n    // this.initialData = { active, name };\n    setTimeout(() => {\n      setDataLoaded(true)\n    }, 1500)\n\n  }, [])\n\n\n  const handleActive = () => {\n    setActive(!this.state.active)\n  };\n\n  const handleName = value => {\n    setName(value)\n  };\n\n  const updateRealm = () => {\n    // const { active, name, campaigns, paginateList } = this.state;\n    // this.setState({ saveLoader: true });\n    // patch(`/identity/realm/${this.props.match.params.uuid}/`, {\n    //   active,\n    //   name,\n    //   campaigns: paginateList\n    // }).then(res => {\n    //   this.initialData = { active: res.data.active, name: res.data.name };\n    //   this.setState({\n    //     realm: res.data,\n    //     saveLoader: false,\n    //     active: res.data.active,\n    //     name: res.data.name\n    //   });\n    // });\n  };\n\n  const addCampaign = async campaign => {\n    // let arrCamp = [...campaign, ...this.state.campaignsOrig];\n\n    // /* campaign.map(camp => {\n    //   arrCamp.push(camp);\n    // }); */\n\n    // this.setState({\n    //   campaigns: arrCamp,\n    //   campaignsOrig: arrCamp,\n    //   paginateList: arrCamp\n    // });\n    // const update = await patch(\n    //   `/identity/realm/${this.props.match.params.uuid}/`,\n    //   {\n    //     campaigns: arrCamp\n    //   }\n    // );\n    // return update;\n  };\n\n  const removeCampaign = async uuid => {\n    // var campaigns = this.state.paginateList.filter(camp => {\n    //   return camp.uuid !== uuid;\n    // });\n    // this.setState({ campaigns, paginateList: campaigns });\n    // const update = await patch(\n    //   `/identity/realm/${this.props.match.params.uuid}/`,\n    //   { campaigns }\n    // );\n    // return update;\n  };\n\n  const paginate = (from, to) => {\n    const campaignsTemp = paginateList.slice(from, to);\n    setCampaigns(campaignsTemp)\n  };\n\n\n  var edit =\n    JSON.stringify(initialData) === JSON.stringify({ active, name })\n      ? false\n      : name.length === 0\n        ? false\n        : true;\n  if (dataLoaded) {\n    return (\n      <>\n        <NavTabs\n          data={realm}\n          tabnames={[]}\n          history={realm}\n          back={{\n            name: \"Back to realms\",\n            url: \"/manage/realms/\"\n          }}\n        />\n        {/* <NavTabs\n            data={realm}\n            tabnames={[]}\n            history={realm}\n            back={{\n              name: \"Back to realms\",\n              url: \"/manage/realms/\"\n            }}\n          />\n          <RealmSettings\n            active={active}\n            realm={realm}\n            handleActive={this.handleActive}\n            handleName={this.handleName}\n            edit={edit}\n            updateRealm={this.updateRealm}\n            saveLoader={saveLoader}\n            campaigns={campaigns}\n            campaignsOrig={this.state.campaignsOrig}\n            removeCampaign={this.removeCampaign}\n            paginateList={paginateList}\n            paginateFn={this.paginate}\n            addCampaign={this.addCampaign}\n          /> */}\n      </>\n    );\n  } else {\n    return <TableLoader />;\n  }\n\n}\n\nexport { RealmSettingsPage };\n"]},"metadata":{},"sourceType":"module"}