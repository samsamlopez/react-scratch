{"ast":null,"code":"import _slicedToArray from \"/home/webdev/Documents/react-portal/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/webdev/Documents/react-portal/src/common-components/pagination/index.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { ChevronLeft, ChevronRight } from \"@material-ui/icons\";\nimport { PaginationContainer, PageItem, Button } from \"./styles/Pagination.style\";\n\nconst Pagination = ({\n  paginateFn,\n  totalItems,\n  itemsPerPage\n}) => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        totalPage = _useState2[0],\n        setTotalPage = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        pages = _useState4[0],\n        setPages = _useState4[1];\n\n  const _useState5 = useState(1),\n        _useState6 = _slicedToArray(_useState5, 2),\n        currentPage = _useState6[0],\n        setCurrentPage = _useState6[1];\n\n  const _useState7 = useState(0),\n        _useState8 = _slicedToArray(_useState7, 2),\n        currentPageIndex = _useState8[0],\n        setCurrentPageIndex = _useState8[1];\n\n  useEffect(() => {\n    setTotalPage(Math.ceil(totalItems / itemsPerPage));\n    let pages = [],\n        x = [];\n\n    for (let i = 0; i < Math.ceil(totalPage); i++) {\n      pages.push(i + 1);\n    }\n\n    for (let index = 0; index < pages.length; index += 4) {\n      let myChunk = pages.slice(index, index + 4);\n      x.push(myChunk);\n    }\n\n    setPages(x);\n    paginateFn(0, itemsPerPage, currentPage);\n  }, [totalPage]);\n\n  const goToPage = page => {\n    setCurrentPage(page);\n    paginateFn((page - 1) * itemsPerPage, page * itemsPerPage, page);\n  };\n\n  const prev = () => {\n    if (currentPage - 1 === 0) {\n      return;\n    }\n\n    if (!pages[currentPageIndex].includes(currentPage - 1)) {\n      setCurrentPageIndex(currentPageIndex - 1);\n    }\n\n    setCurrentPage(currentPage - 1);\n    paginateFn((currentPage - 2) * itemsPerPage, (currentPage - 1) * itemsPerPage, currentPage - 1);\n  };\n\n  const next = () => {\n    if (currentPage + 1 > totalPage) {\n      return;\n    }\n\n    if (!pages[currentPageIndex].includes(currentPage + 1)) {\n      setCurrentPageIndex(currentPageIndex + 1);\n    }\n\n    setCurrentPage(currentPage + 1);\n    paginateFn(currentPage * itemsPerPage, (currentPage + 1) * itemsPerPage, currentPage + 1);\n  };\n\n  const goToLast = page => {\n    setCurrentPageIndex(pages.length - 1);\n    setCurrentPage(page);\n    paginateFn((page - 1) * itemsPerPage, page * itemsPerPage, page);\n  };\n\n  return React.createElement(PaginationContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, pages.length !== 0 ? React.createElement(React.Fragment, null, React.createElement(PageItem, {\n    className: currentPage === 1 && currentPageIndex === 0 ? \"item page_btn disabled\" : \"item page_btn\",\n    id: \"prev\",\n    onClick: () => prev(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(ChevronLeft, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), \" Back\"), React.createElement(PageItem, {\n    id: \"pagination-component\",\n    className: \"item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, pages[currentPageIndex].map((page, i) => {\n    return React.createElement(Button, {\n      key: page,\n      className: currentPage === page ? \"active item\" : \"item\",\n      onClick: () => goToPage(page),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, page);\n  }), currentPageIndex !== pages.length - 1 && React.createElement(React.Fragment, null, React.createElement(Button, {\n    className: \"item-ellipsis\",\n    key: \"ellipsis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"...\"), React.createElement(Button, {\n    className: \"item\",\n    key: \"last\",\n    onClick: () => goToLast(totalPage),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, totalPage))), React.createElement(PageItem, {\n    className: currentPage === totalPage ? \"item page_btn disabled\" : \"item page_btn\",\n    id: \"next\",\n    onClick: () => next(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"Next \", React.createElement(ChevronRight, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }))) : null);\n};\n\nPagination.defaultProps = {\n  itemsPerPage: 0,\n  totalItems: 0,\n  paginateFn: () => {}\n};\nexport { Pagination };","map":{"version":3,"sources":["/home/webdev/Documents/react-portal/src/common-components/pagination/index.tsx"],"names":["React","useState","useEffect","ChevronLeft","ChevronRight","PaginationContainer","PageItem","Button","Pagination","paginateFn","totalItems","itemsPerPage","totalPage","setTotalPage","pages","setPages","currentPage","setCurrentPage","currentPageIndex","setCurrentPageIndex","Math","ceil","x","i","push","index","length","myChunk","slice","goToPage","page","prev","includes","next","goToLast","map","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ChevronLeft, ChevronRight } from \"@material-ui/icons\";\nimport {\n  PaginationContainer,\n  PageItem,\n  Button\n} from \"./styles/Pagination.style\";\n\ninterface Props {\n  paginateFn: Function;\n  totalItems: number;\n  itemsPerPage: number;\n}\n\nconst Pagination: React.FC<Props> = ({\n  paginateFn,\n  totalItems,\n  itemsPerPage\n}) => {\n  const [totalPage, setTotalPage] = useState<number>(0);\n  const [pages, setPages] = useState<number[][]>([]);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [currentPageIndex, setCurrentPageIndex] = useState<number>(0);\n\n  useEffect(() => {\n    setTotalPage(Math.ceil(totalItems / itemsPerPage));\n    let pages: any = [],\n      x: any = [];\n    for (let i = 0; i < Math.ceil(totalPage); i++) {\n      pages.push(i + 1);\n    }\n    for (let index = 0; index < pages.length; index += 4) {\n      let myChunk = pages.slice(index, index + 4);\n      x.push(myChunk);\n    }\n    setPages(x);\n    paginateFn(0, itemsPerPage, currentPage);\n  }, [totalPage]);\n\n  const goToPage = (page: number) => {\n    setCurrentPage(page);\n    paginateFn((page - 1) * itemsPerPage, page * itemsPerPage, page);\n  };\n\n  const prev = () => {\n    if (currentPage - 1 === 0) {\n      return;\n    }\n    if (!pages[currentPageIndex].includes(currentPage - 1)) {\n      setCurrentPageIndex(currentPageIndex - 1);\n    }\n    setCurrentPage(currentPage - 1);\n    paginateFn(\n      (currentPage - 2) * itemsPerPage,\n      (currentPage - 1) * itemsPerPage,\n      currentPage - 1\n    );\n  };\n\n  const next = () => {\n    if (currentPage + 1 > totalPage) {\n      return;\n    }\n    if (!pages[currentPageIndex].includes(currentPage + 1)) {\n      setCurrentPageIndex(currentPageIndex + 1);\n    }\n    setCurrentPage(currentPage + 1);\n    paginateFn(\n      currentPage * itemsPerPage,\n      (currentPage + 1) * itemsPerPage,\n      currentPage + 1\n    );\n  };\n\n  const goToLast = (page: number) => {\n    setCurrentPageIndex(pages.length - 1);\n    setCurrentPage(page);\n    paginateFn((page - 1) * itemsPerPage, page * itemsPerPage, page);\n  };\n\n  return (\n    <PaginationContainer>\n      {pages.length !== 0 ? (\n        <>\n          <PageItem\n            className={\n              currentPage === 1 && currentPageIndex === 0\n                ? \"item page_btn disabled\"\n                : \"item page_btn\"\n            }\n            id=\"prev\"\n            onClick={() => prev()}\n          >\n            <ChevronLeft /> Back\n          </PageItem>\n\n          <PageItem id=\"pagination-component\" className=\"item\">\n            {pages[currentPageIndex].map((page: number, i: any) => {\n              return (\n                <Button\n                  key={page}\n                  className={currentPage === page ? \"active item\" : \"item\"}\n                  onClick={() => goToPage(page)}\n                >\n                  {page}\n                </Button>\n              );\n            })}\n            {currentPageIndex !== pages.length - 1 && (\n              <>\n                <Button className=\"item-ellipsis\" key={\"ellipsis\"}>\n                  {\"...\"}\n                </Button>\n                <Button\n                  className=\"item\"\n                  key={\"last\"}\n                  onClick={() => goToLast(totalPage)}\n                >\n                  {totalPage}\n                </Button>\n              </>\n            )}\n          </PageItem>\n\n          <PageItem\n            className={\n              currentPage === totalPage\n                ? \"item page_btn disabled\"\n                : \"item page_btn\"\n            }\n            id=\"next\"\n            onClick={() => next()}\n          >\n            Next <ChevronRight />\n          </PageItem>\n        </>\n      ) : null}\n    </PaginationContainer>\n  );\n};\n\nPagination.defaultProps = {\n  itemsPerPage: 0,\n  totalItems: 0,\n  paginateFn: () => {}\n} as Partial<Props>;\n\nexport { Pagination };\n"]},"metadata":{},"sourceType":"module"}