{"ast":null,"code":"import _objectWithoutProperties from \"/home/webdev/Documents/react-portal/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/home/webdev/Documents/react-portal/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/webdev/Documents/react-portal/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/webdev/Documents/react-portal/src/components/manage/manage-realms/RealmTable.js\";\nimport { TableCell, TableRow } from '@material-ui/core';\nimport { FileCopyOutlined as Icon } from '@material-ui/icons';\nimport { mdiContentCopy } from '@mdi/js';\nimport React, { useState } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { AsyncTable } from 'common-components';\nimport { EditButton } from 'common-components';\nimport { ActiveCell, UnderlineCell } from 'common-components';\nimport { headers, LightTooltip } from './contsVar';\n\nconst RealmTable = ({\n  realms,\n  history\n}) => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        copy = _useState2[0],\n        setCopy = _useState2[1];\n\n  return React.createElement(React.Fragment, null, React.createElement(AsyncTable, {\n    headers: headers,\n    tableData: realms,\n    render: (realms, {\n      row,\n      cell,\n      uuid,\n      icon\n    }) => realms.map(realm => React.createElement(TableRow, {\n      key: realm.uuid,\n      className: row,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(UnderlineCell, {\n      className: cell,\n      onClick: () => history.push(`/manage/realms/edit/${realm.uuid}`),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, realm.name), React.createElement(TableCell, {\n      className: uuid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, realm.uuid), React.createElement(CopyToClipboard, {\n      text: realm.uuid,\n      onCopy: () => setCopy(true),\n      onPointerLeave: () => setCopy(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, copy ? React.createElement(LightTooltip, {\n      title: \"UUID Copied!\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      path: mdiContentCopy,\n      className: icon,\n      size: 1,\n      rotate: 360,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    })) : React.createElement(LightTooltip, {\n      title: \"Copy UUID\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      path: mdiContentCopy,\n      className: icon,\n      size: 1,\n      rotate: 360,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    })))), React.createElement(ActiveCell, {\n      className: cell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, realm.active), React.createElement(TableCell, {\n      className: cell,\n      align: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(EditButton, {\n      text: \"Edit\",\n      onClickFunc: () => history.push(`/manage/realms/edit/${realm.uuid}`),\n      style: {\n        color: '#444851'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }), React.createElement(Dialog, {\n    open: create.load,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(LoadingModal, {\n    text: 'One moment. We’re adding the realm…',\n    cancelFn: () => {\n      cancel();\n      setCreate(_objectSpread({}, create, {\n        load: false\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  })), React.createElement(Dialog, {\n    open: create.done,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(SuccessModal, {\n    text: `You have created the “${create.name}” Realm`,\n    btnText: 'CREATE ANOTHER',\n    closeFn: getData,\n    btnFn: () => {\n      const _constCreate = constCreate,\n            open = _constCreate.open,\n            rest = _objectWithoutProperties(_constCreate, [\"open\"]);\n\n      setCreate(_objectSpread({}, rest, {\n        open: true\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  })), React.createElement(Modal, {\n    open: create.open,\n    title: \"Create new realm\",\n    onClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(InputField, {\n    label: \"Realm name\",\n    required: true,\n    fullWidth: true,\n    value: create.name,\n    onChange: handleChange,\n    onBlur: handleChange,\n    error: create.nameErr ? true : false,\n    helperText: create.nameErr ? create.nameErr : ' ',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), React.createElement(InputField, {\n    label: \"Active\",\n    disabled: true,\n    fullWidth: true,\n    InputProps: {\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(Switch, {\n        color: \"primary\",\n        checked: create.active,\n        onChange: () => setCreate(_objectSpread({}, create, {\n          active: !create.active\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }))\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), React.createElement(BtnCont, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(CancelBtn, {\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(SaveButton, {\n    disabled: !create.name || create.nameErr,\n    onClick: handleCreate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"Create\"))));\n};\n\nexport default RealmTable;","map":{"version":3,"sources":["/home/webdev/Documents/react-portal/src/components/manage/manage-realms/RealmTable.js"],"names":["TableCell","TableRow","FileCopyOutlined","Icon","mdiContentCopy","React","useState","CopyToClipboard","AsyncTable","EditButton","ActiveCell","UnderlineCell","headers","LightTooltip","RealmTable","realms","history","copy","setCopy","row","cell","uuid","icon","map","realm","push","name","active","color","create","load","cancel","setCreate","done","getData","constCreate","open","rest","handleClose","handleChange","nameErr","endAdornment","handleCreate"],"mappings":"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","sourcesContent":["import { TableCell, TableRow } from '@material-ui/core'\nimport { FileCopyOutlined as Icon } from '@material-ui/icons'\nimport { mdiContentCopy } from '@mdi/js'\nimport React, { useState } from 'react'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport { AsyncTable } from 'common-components'\nimport { EditButton } from 'common-components'\nimport {\n  ActiveCell,\n  UnderlineCell\n} from 'common-components'\nimport { headers, LightTooltip } from './contsVar'\n\nconst RealmTable = ({ realms, history }) => {\n  const [copy, setCopy] = useState(false)\n\n  return (\n    <>\n      <AsyncTable\n        headers={headers}\n        tableData={realms}\n        render={(realms, { row, cell, uuid, icon }) =>\n          realms.map(realm => (\n            <TableRow key={realm.uuid} className={row}>\n              <UnderlineCell\n                className={cell}\n                onClick={() =>\n                  history.push(`/manage/realms/edit/${realm.uuid}`)\n                }\n              >\n                {realm.name}\n              </UnderlineCell>\n              <TableCell className={uuid}>\n                <p>{realm.uuid}</p>\n                <CopyToClipboard\n                  text={realm.uuid}\n                  onCopy={() => setCopy(true)}\n                  onPointerLeave={() => setCopy(false)}\n                >\n                  {copy ? (\n                    <LightTooltip title=\"UUID Copied!\" placement=\"top\">\n                      <Icon\n                        path={mdiContentCopy}\n                        className={icon}\n                        size={1}\n                        rotate={360}\n                      />\n                    </LightTooltip>\n                  ) : (\n                      <LightTooltip title=\"Copy UUID\" placement=\"top\">\n                        <Icon\n                          path={mdiContentCopy}\n                          className={icon}\n                          size={1}\n                          rotate={360}\n                        />\n                      </LightTooltip>\n                    )}\n                </CopyToClipboard>\n              </TableCell>\n              <ActiveCell className={cell}>{realm.active}</ActiveCell>\n              <TableCell className={cell} align=\"right\">\n                <EditButton\n                  text=\"Edit\"\n                  onClickFunc={() =>\n                    history.push(`/manage/realms/edit/${realm.uuid}`)\n                  }\n                  style={{\n                    color: '#444851'\n                  }}\n                />\n              </TableCell>\n            </TableRow>\n          ))\n        }\n      />\n      <Dialog open={create.load}>\n        <LoadingModal\n          text={'One moment. We’re adding the realm…'}\n          cancelFn={() => {\n            cancel()\n            setCreate({ ...create, load: false })\n          }}\n        />\n      </Dialog>\n      <Dialog open={create.done}>\n        <SuccessModal\n          text={`You have created the “${create.name}” Realm`}\n          btnText={'CREATE ANOTHER'}\n          closeFn={getData}\n          btnFn={() => {\n            const { open, ...rest } = constCreate\n            setCreate({ ...rest, open: true })\n          }}\n        />\n      </Dialog>\n      <Modal open={create.open} title=\"Create new realm\" onClose={handleClose}>\n        <InputField\n          label=\"Realm name\"\n          required\n          fullWidth\n          value={create.name}\n          onChange={handleChange}\n          onBlur={handleChange}\n          error={create.nameErr ? true : false}\n          helperText={create.nameErr ? create.nameErr : ' '}\n        />\n        <InputField\n          label=\"Active\"\n          disabled\n          fullWidth\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <Switch\n                  color=\"primary\"\n                  checked={create.active}\n                  onChange={() =>\n                    setCreate({ ...create, active: !create.active })\n                  }\n                />\n              </InputAdornment>\n            )\n          }}\n        />\n        <BtnCont>\n          <CancelBtn onClick={handleClose}>Cancel</CancelBtn>\n          <SaveButton\n            disabled={!create.name || create.nameErr}\n            onClick={handleCreate}\n          >\n            Create\n          </SaveButton>\n        </BtnCont>\n      </Modal>\n    </>\n  )\n}\n\nexport default RealmTable\n"]},"metadata":{},"sourceType":"module"}