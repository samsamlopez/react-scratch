{"ast":null,"code":"var _jsxFileName = \"/home/webdev/Documents/react-portal/src/components/manage/manage-realms/settings/index.js\";\nimport React, { Component } from \"react\"; // import NavTabs from \"../../../common-components/nav-tabs/Settings-menu-bar\";\n\n/*COMPONENTS*/\n\nimport { TableLoader } from \"common-components\"; // import { get, patch, post, cancel, getGroups } from \"../../../../utils/api\";\n// import RealmSettings from \"./realmSettings\";\n\nclass RealmSettings extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleActive = () => {\n      this.setState({\n        active: !this.state.active\n      });\n    };\n\n    this.handleName = value => {\n      this.setState({\n        name: value\n      });\n    };\n\n    this.updateRealm = () => {\n      const _this$state = this.state,\n            active = _this$state.active,\n            name = _this$state.name,\n            campaigns = _this$state.campaigns,\n            paginateList = _this$state.paginateList;\n      this.setState({\n        saveLoader: true\n      });\n      patch(`/identity/realm/${this.props.match.params.uuid}/`, {\n        active,\n        name,\n        campaigns: paginateList\n      }).then(res => {\n        this.initialData = {\n          active: res.data.active,\n          name: res.data.name\n        };\n        this.setState({\n          realm: res.data,\n          saveLoader: false,\n          active: res.data.active,\n          name: res.data.name\n        });\n      });\n    };\n\n    this.addCampaign = async campaign => {\n      let arrCamp = [...campaign, ...this.state.campaignsOrig];\n      /* campaign.map(camp => {\n        arrCamp.push(camp);\n      }); */\n\n      this.setState({\n        campaigns: arrCamp,\n        campaignsOrig: arrCamp,\n        paginateList: arrCamp\n      });\n      const update = await patch(`/identity/realm/${this.props.match.params.uuid}/`, {\n        campaigns: arrCamp\n      });\n      return update;\n    };\n\n    this.removeCampaign = async uuid => {\n      var campaigns = this.state.paginateList.filter(camp => {\n        return camp.uuid !== uuid;\n      });\n      this.setState({\n        campaigns,\n        paginateList: campaigns\n      });\n      const update = await patch(`/identity/realm/${this.props.match.params.uuid}/`, {\n        campaigns\n      });\n      return update;\n    };\n\n    this.paginate = (from, to) => {\n      const campaigns = this.state.paginateList.slice(from, to);\n      this.setState({\n        campaigns\n      });\n    };\n\n    this.state = {\n      dataLoaded: false,\n      realm: null,\n      active: null,\n      name: \"\",\n      saveLoader: false,\n      campaigns: [],\n      paginateList: [],\n      campaignsOrig: []\n    };\n    this.initialData = {};\n  }\n\n  async componentDidMount() {\n    let active, name;\n    await get(`/identity/realm/${this.props.match.params.uuid}/`).then(result => {\n      active = result.data.active;\n      name = result.data.name;\n      this.setState({\n        realm: result.data,\n        active,\n        name,\n        campaigns: result.data.campaigns,\n        campaignsOrig: result.data.campaigns,\n        paginateList: result.data.campaigns\n      });\n    });\n    this.initialData = {\n      active,\n      name\n    };\n    this.setState({\n      dataLoaded: true\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          realm = _this$state2.realm,\n          active = _this$state2.active,\n          name = _this$state2.name,\n          dataLoaded = _this$state2.dataLoaded,\n          campaigns = _this$state2.campaigns,\n          saveLoader = _this$state2.saveLoader,\n          paginateList = _this$state2.paginateList;\n    var edit = JSON.stringify(this.initialData) === JSON.stringify({\n      active,\n      name\n    }) ? false : this.state.name.length === 0 ? false : true;\n\n    if (dataLoaded) {\n      return React.createElement(React.Fragment, null, React.createElement(TableLoader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(TableLoader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport { RealmSettings };","map":{"version":3,"sources":["/home/webdev/Documents/react-portal/src/components/manage/manage-realms/settings/index.js"],"names":["React","Component","TableLoader","RealmSettings","constructor","props","handleActive","setState","active","state","handleName","value","name","updateRealm","campaigns","paginateList","saveLoader","patch","match","params","uuid","then","res","initialData","data","realm","addCampaign","campaign","arrCamp","campaignsOrig","update","removeCampaign","filter","camp","paginate","from","to","slice","dataLoaded","componentDidMount","get","result","render","edit","JSON","stringify","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import NavTabs from \"../../../common-components/nav-tabs/Settings-menu-bar\";\n/*COMPONENTS*/\nimport { TableLoader } from \"common-components\";\n\n// import { get, patch, post, cancel, getGroups } from \"../../../../utils/api\";\n\n// import RealmSettings from \"./realmSettings\";\n\nclass RealmSettings extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dataLoaded: false,\n      realm: null,\n      active: null,\n      name: \"\",\n      saveLoader: false,\n      campaigns: [],\n      paginateList: [],\n      campaignsOrig: []\n    };\n    this.initialData = {};\n  }\n\n  async componentDidMount() {\n    let active, name;\n    await get(`/identity/realm/${this.props.match.params.uuid}/`).then(\n      result => {\n        active = result.data.active;\n        name = result.data.name;\n        this.setState({\n          realm: result.data,\n          active,\n          name,\n          campaigns: result.data.campaigns,\n          campaignsOrig: result.data.campaigns,\n          paginateList: result.data.campaigns\n        });\n      }\n    );\n    this.initialData = { active, name };\n    this.setState({ dataLoaded: true });\n  }\n\n  handleActive = () => {\n    this.setState({\n      active: !this.state.active\n    });\n  };\n\n  handleName = value => {\n    this.setState({ name: value });\n  };\n\n  updateRealm = () => {\n    const { active, name, campaigns, paginateList } = this.state;\n    this.setState({ saveLoader: true });\n    patch(`/identity/realm/${this.props.match.params.uuid}/`, {\n      active,\n      name,\n      campaigns: paginateList\n    }).then(res => {\n      this.initialData = { active: res.data.active, name: res.data.name };\n      this.setState({\n        realm: res.data,\n        saveLoader: false,\n        active: res.data.active,\n        name: res.data.name\n      });\n    });\n  };\n\n  addCampaign = async campaign => {\n    let arrCamp = [...campaign, ...this.state.campaignsOrig];\n\n    /* campaign.map(camp => {\n      arrCamp.push(camp);\n    }); */\n\n    this.setState({\n      campaigns: arrCamp,\n      campaignsOrig: arrCamp,\n      paginateList: arrCamp\n    });\n    const update = await patch(\n      `/identity/realm/${this.props.match.params.uuid}/`,\n      {\n        campaigns: arrCamp\n      }\n    );\n    return update;\n  };\n\n  removeCampaign = async uuid => {\n    var campaigns = this.state.paginateList.filter(camp => {\n      return camp.uuid !== uuid;\n    });\n    this.setState({ campaigns, paginateList: campaigns });\n    const update = await patch(\n      `/identity/realm/${this.props.match.params.uuid}/`,\n      { campaigns }\n    );\n    return update;\n  };\n\n  paginate = (from, to) => {\n    const campaigns = this.state.paginateList.slice(from, to);\n    this.setState({ campaigns });\n  };\n\n  render() {\n    const {\n      realm,\n      active,\n      name,\n      dataLoaded,\n      campaigns,\n      saveLoader,\n      paginateList\n    } = this.state;\n    var edit =\n      JSON.stringify(this.initialData) === JSON.stringify({ active, name })\n        ? false\n        : this.state.name.length === 0\n          ? false\n          : true;\n    if (dataLoaded) {\n      return (\n        <>\n          <TableLoader />\n          {/* <NavTabs\n            data={realm}\n            tabnames={[]}\n            history={realm}\n            back={{\n              name: \"Back to realms\",\n              url: \"/manage/realms/\"\n            }}\n          />\n          <RealmSettings\n            active={active}\n            realm={realm}\n            handleActive={this.handleActive}\n            handleName={this.handleName}\n            edit={edit}\n            updateRealm={this.updateRealm}\n            saveLoader={saveLoader}\n            campaigns={campaigns}\n            campaignsOrig={this.state.campaignsOrig}\n            removeCampaign={this.removeCampaign}\n            paginateList={paginateList}\n            paginateFn={this.paginate}\n            addCampaign={this.addCampaign}\n          /> */}\n        </>\n      );\n    } else {\n      return <TableLoader />;\n    }\n  }\n}\n\nexport { RealmSettings };\n"]},"metadata":{},"sourceType":"module"}