{"ast":null,"code":"import _slicedToArray from \"/home/webdev/Documents/react-portal/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/webdev/Documents/react-portal/src/components/manage/manage-realms/settings/index.js\";\nimport React, { useState, useEffect } from \"react\";\n/*COMPONENTS*/\n\nimport { TableLoader, BackButton, StatusLabel } from \"common-components\";\nimport { MockRealm, MockCampaigns, MockRealmData } from '../components/contsVar'; // import { get, patch, post, cancel, getGroups } from \"../../../../utils/api\";\n\nimport RealmSettings from \"./realmSettings\";\n\nconst RealmSettingsPage = () => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        dataLoaded = _useState2[0],\n        setDataLoaded = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        realm = _useState4[0],\n        setRealm = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        active = _useState6[0],\n        setActive = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        name = _useState8[0],\n        setName = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        saveLoader = _useState10[0],\n        setSaveLoader = _useState10[1];\n\n  const _useState11 = useState([]),\n        _useState12 = _slicedToArray(_useState11, 2),\n        campaigns = _useState12[0],\n        setCampaigns = _useState12[1];\n\n  const _useState13 = useState([]),\n        _useState14 = _slicedToArray(_useState13, 2),\n        paginateList = _useState14[0],\n        setPaginateList = _useState14[1];\n\n  const _useState15 = useState([]),\n        _useState16 = _slicedToArray(_useState15, 2),\n        campaignsOrig = _useState16[0],\n        setCampaignsOrig = _useState16[1];\n\n  let initialData = {}; // async componentDidMount() {\n  //   let active, name;\n  //   await get(`/identity/realm/${this.props.match.params.uuid}/`).then(\n  //     result => {\n  //       active = result.data.active;\n  //       name = result.data.name;\n  //       this.setState({\n  //         realm: result.data,\n  //         active,\n  //         name,\n  //         campaigns: result.data.campaigns,\n  //         campaignsOrig: result.data.campaigns,\n  //         paginateList: result.data.campaigns\n  //       });\n  //     }\n  //   );\n  //   this.initialData = { active, name };\n  //   this.setState({ dataLoaded: true });\n  // }\n\n  useEffect(() => {\n    // activeTemp = result.data.active;\n    console.log(MockRealmData);\n    setRealm(MockRealmData);\n    setActive(true);\n    setName(\"Test\");\n    setCampaigns(MockCampaigns);\n    setCampaignsOrig(MockCampaigns);\n    setPaginateList(MockCampaigns); // this.initialData = { active, name };\n\n    setTimeout(() => {\n      setDataLoaded(true);\n    }, 1500);\n  }, []);\n\n  const handleActive = () => {\n    setActive(!active);\n  };\n\n  const handleName = value => {\n    setName(value);\n  };\n\n  const updateRealm = () => {// const { active, name, campaigns, paginateList } = this.state;\n    // this.setState({ saveLoader: true });\n    // patch(`/identity/realm/${this.props.match.params.uuid}/`, {\n    //   active,\n    //   name,\n    //   campaigns: paginateList\n    // }).then(res => {\n    //   this.initialData = { active: res.data.active, name: res.data.name };\n    //   this.setState({\n    //     realm: res.data,\n    //     saveLoader: false,\n    //     active: res.data.active,\n    //     name: res.data.name\n    //   });\n    // });\n  };\n\n  const addCampaign = async campaign => {// let arrCamp = [...campaign, ...this.state.campaignsOrig];\n    // /* campaign.map(camp => {\n    //   arrCamp.push(camp);\n    // }); */\n    // this.setState({\n    //   campaigns: arrCamp,\n    //   campaignsOrig: arrCamp,\n    //   paginateList: arrCamp\n    // });\n    // const update = await patch(\n    //   `/identity/realm/${this.props.match.params.uuid}/`,\n    //   {\n    //     campaigns: arrCamp\n    //   }\n    // );\n    // return update;\n  };\n\n  const removeCampaign = async uuid => {// var campaigns = this.state.paginateList.filter(camp => {\n    //   return camp.uuid !== uuid;\n    // });\n    // this.setState({ campaigns, paginateList: campaigns });\n    // const update = await patch(\n    //   `/identity/realm/${this.props.match.params.uuid}/`,\n    //   { campaigns }\n    // );\n    // return update;\n  };\n\n  const paginate = (from, to) => {\n    const campaignsTemp = paginateList.slice(from, to);\n    setCampaigns(campaignsTemp);\n  };\n\n  var edit = JSON.stringify(initialData) === JSON.stringify({\n    active,\n    name\n  }) ? false : name.length === 0 ? false : true;\n\n  if (dataLoaded) {\n    return React.createElement(React.Fragment, null, React.createElement(BackButton, {\n      text: \"Back to realms\",\n      to: \"/manage/realms/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        fontFamily: 'Roboto',\n        fontSize: '24px',\n        fontHeight: 'normal',\n        fontStretch: 'normal',\n        fontStyle: 'normal',\n        lineHeight: 'normal',\n        letterSpacing: 'normal',\n        color: '#444851'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, name), React.createElement(StatusLabel, {\n      status: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    })), React.createElement(RealmSettings, {\n      active: active,\n      realm: realm,\n      handleActive: handleActive,\n      handleName: handleName,\n      edit: edit,\n      updateRealm: updateRealm,\n      saveLoader: saveLoader,\n      campaigns: campaigns,\n      campaignsOrig: campaignsOrig,\n      removeCampaign: removeCampaign,\n      paginateList: paginateList,\n      paginateFn: paginate,\n      addCampaign: addCampaign,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }));\n  } else {\n    return React.createElement(TableLoader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    });\n  }\n};\n\nexport { RealmSettingsPage };","map":{"version":3,"sources":["/home/webdev/Documents/react-portal/src/components/manage/manage-realms/settings/index.js"],"names":["React","useState","useEffect","TableLoader","BackButton","StatusLabel","MockRealm","MockCampaigns","MockRealmData","RealmSettings","RealmSettingsPage","dataLoaded","setDataLoaded","realm","setRealm","active","setActive","name","setName","saveLoader","setSaveLoader","campaigns","setCampaigns","paginateList","setPaginateList","campaignsOrig","setCampaignsOrig","initialData","console","log","setTimeout","handleActive","handleName","value","updateRealm","addCampaign","campaign","removeCampaign","uuid","paginate","from","to","campaignsTemp","slice","edit","JSON","stringify","length","display","alignItems","fontFamily","fontSize","fontHeight","fontStretch","fontStyle","lineHeight","letterSpacing","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n/*COMPONENTS*/\nimport { TableLoader, BackButton, StatusLabel } from \"common-components\";\nimport {\n  MockRealm,\n  MockCampaigns,\n  MockRealmData\n} from '../components/contsVar'\n// import { get, patch, post, cancel, getGroups } from \"../../../../utils/api\";\n\nimport RealmSettings from \"./realmSettings\";\n\n\n\nconst RealmSettingsPage = () => {\n\n  const [dataLoaded, setDataLoaded] = useState(false);\n  const [realm, setRealm] = useState(null);\n  const [active, setActive] = useState(null);\n  const [name, setName] = useState(\"\");\n  const [saveLoader, setSaveLoader] = useState(false);\n  const [campaigns, setCampaigns] = useState([]);\n  const [paginateList, setPaginateList] = useState([]);\n  const [campaignsOrig, setCampaignsOrig] = useState([]);\n  let initialData = {};\n\n  // async componentDidMount() {\n  //   let active, name;\n  //   await get(`/identity/realm/${this.props.match.params.uuid}/`).then(\n  //     result => {\n  //       active = result.data.active;\n  //       name = result.data.name;\n  //       this.setState({\n  //         realm: result.data,\n  //         active,\n  //         name,\n  //         campaigns: result.data.campaigns,\n  //         campaignsOrig: result.data.campaigns,\n  //         paginateList: result.data.campaigns\n  //       });\n  //     }\n  //   );\n  //   this.initialData = { active, name };\n  //   this.setState({ dataLoaded: true });\n  // }\n\n  useEffect(() => {\n    // activeTemp = result.data.active;\n    console.log(MockRealmData)\n    setRealm(MockRealmData)\n    setActive(true)\n    setName(\"Test\")\n    setCampaigns(MockCampaigns)\n    setCampaignsOrig(MockCampaigns)\n    setPaginateList(MockCampaigns)\n    // this.initialData = { active, name };\n    setTimeout(() => {\n      setDataLoaded(true)\n    }, 1500)\n\n  }, [])\n\n\n  const handleActive = () => {\n    setActive(!active)\n  };\n\n  const handleName = value => {\n    setName(value)\n  };\n\n  const updateRealm = () => {\n    // const { active, name, campaigns, paginateList } = this.state;\n    // this.setState({ saveLoader: true });\n    // patch(`/identity/realm/${this.props.match.params.uuid}/`, {\n    //   active,\n    //   name,\n    //   campaigns: paginateList\n    // }).then(res => {\n    //   this.initialData = { active: res.data.active, name: res.data.name };\n    //   this.setState({\n    //     realm: res.data,\n    //     saveLoader: false,\n    //     active: res.data.active,\n    //     name: res.data.name\n    //   });\n    // });\n  };\n\n  const addCampaign = async campaign => {\n    // let arrCamp = [...campaign, ...this.state.campaignsOrig];\n\n    // /* campaign.map(camp => {\n    //   arrCamp.push(camp);\n    // }); */\n\n    // this.setState({\n    //   campaigns: arrCamp,\n    //   campaignsOrig: arrCamp,\n    //   paginateList: arrCamp\n    // });\n    // const update = await patch(\n    //   `/identity/realm/${this.props.match.params.uuid}/`,\n    //   {\n    //     campaigns: arrCamp\n    //   }\n    // );\n    // return update;\n  };\n\n  const removeCampaign = async uuid => {\n    // var campaigns = this.state.paginateList.filter(camp => {\n    //   return camp.uuid !== uuid;\n    // });\n    // this.setState({ campaigns, paginateList: campaigns });\n    // const update = await patch(\n    //   `/identity/realm/${this.props.match.params.uuid}/`,\n    //   { campaigns }\n    // );\n    // return update;\n  };\n\n  const paginate = (from, to) => {\n    const campaignsTemp = paginateList.slice(from, to);\n    setCampaigns(campaignsTemp)\n  };\n\n\n  var edit =\n    JSON.stringify(initialData) === JSON.stringify({ active, name })\n      ? false\n      : name.length === 0\n        ? false\n        : true;\n  if (dataLoaded) {\n    return (\n      <>\n        <BackButton text=\"Back to realms\" to=\"/manage/realms/\" />\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <p style={{\n            fontFamily: 'Roboto',\n            fontSize: '24px',\n            fontHeight: 'normal',\n            fontStretch: 'normal',\n            fontStyle: 'normal',\n            lineHeight: 'normal',\n            letterSpacing: 'normal',\n            color: '#444851',\n          }}>{name}</p>\n          <StatusLabel status={true} />\n        </div>\n        <RealmSettings\n          active={active}\n          realm={realm}\n          handleActive={handleActive}\n          handleName={handleName}\n          edit={edit}\n          updateRealm={updateRealm}\n          saveLoader={saveLoader}\n          campaigns={campaigns}\n          campaignsOrig={campaignsOrig}\n          removeCampaign={removeCampaign}\n          paginateList={paginateList}\n          paginateFn={paginate}\n          addCampaign={addCampaign}\n        />\n      </>\n    );\n  } else {\n    return <TableLoader />;\n  }\n\n}\n\nexport { RealmSettingsPage };\n"]},"metadata":{},"sourceType":"module"}